(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"3Qvj":function(e,n,t){"use strict";t.d(n,"a",(function(){return s}));var i=t("aurelia-dialog"),r=t("resources/dialogs/SelectBus"),a=t("resources/dialogs/SelectRecipe"),o=t("resources/dialogs/SelectX"),s=function(){function e(e){this.ds=e,this.modals={SelectBus:r.SelectBus,SelectRecipe:a.SelectRecipe,SelectX:o.SelectX}}return e.prototype.open=function(e,n,t){var i=this;return void 0===t&&(t=!1),new Promise((function(r,a){i.ds.open({viewModel:i.modals[e],model:n,lock:t}).whenClosed((function(e){return r(e.output)}))}))},e}();s.inject=[i.DialogService]},"resources/dialogs/SelectBus":function(e,n,t){"use strict";t.r(n),t.d(n,"SelectBus",(function(){return r}));var i=t("aurelia-dialog"),r=function(){function e(e){this.controller=e}var n=e.prototype;return n.activate=function(e){this.options=e.base.facBlocks,this.selected=null},n.selectedChanged=function(e){console.log(e)},n.complete=function(){this.controller.ok({selected:this.selected})},e}();r.inject=[i.DialogController]},"resources/dialogs/SelectBus.html":function(e,n){e.exports='<template>\n  <ux-dialog>\n    <ux-dialog-header>Select Bus</ux-dialog-header>\n    <ux-dialog-body>\n      <div repeat.for="block of options" click.trigger="selected = (block == selected && undefined ) || block">\n        <span class.bind="block==selected && \'button\'">\n        ${block.name+":"+block.type}\n        </span>\n      </div>\n    </ux-dialog-body>\n    <ux-dialog-footer>\n      <button click.trigger="complete()">Close</button>\n    </ux-dialog-footer>\n  </ux-dialog>\n</template>\n'},"resources/dialogs/SelectRecipe":function(e,n,t){"use strict";t.r(n),t.d(n,"SelectRecipe",(function(){return a}));var i=t("aurelia-dialog"),r=t("+Aae"),a=function(){function e(e,n){this.selected=null,this.controller=e,this.mgrs=n}var n=e.prototype;return n.activate=function(e){var n,t=this;this.model=e,Object.entries(e.tags).forEach((function(e){var i=e[0],r=e[1];n=t.mgrs.rec.recipesByTags(i,r,n)})),this.recList=n},n.select=function(e){this.selected=e==this.selected?null:e},n.complete=function(){this.controller.ok({recipe:this.selected})},e}();a.inject=[i.DialogController,r.a]},"resources/dialogs/SelectRecipe.html":function(e,n){e.exports='<template>\n  <ux-dialog>\n    <ux-dialog-header>Select Recipe</ux-dialog-header>\n    <ux-dialog-body>\n      <icon-base\n        repeat.for="rec of recList"\n        item.bind="rec"\n        click.delegate="select(rec)"\n        class="${rec==selected ? \'selected\' : \'\'}"\n      ></icon-base>\n    </ux-dialog-body>\n    <ux-dialog-footer>\n      <button click.trigger="complete()">Done</button>\n    </ux-dialog-footer>\n  </ux-dialog>\n</template>\n'},"resources/dialogs/SelectX":function(e,n,t){"use strict";t.r(n),t.d(n,"SelectX",(function(){return a}));var i=t("aurelia-dialog"),r=t("+Aae"),a=function(){function e(e,n){this.selected=null,this.controller=e,this.mgrs=n}var n=e.prototype;return n.activate=function(e){this.list=e.list,this.type=e.type,this.selected=e.default},n.select=function(e){this.selected=e==this.selected?null:e},n.complete=function(){this.controller.ok({item:this.selected})},e}();a.inject=[i.DialogController,r.a]},"resources/dialogs/SelectX.html":function(e,n){e.exports='<template>\n  <ux-dialog>\n    <ux-dialog-header>Select ${type}</ux-dialog-header>\n    <ux-dialog-body>\n      <icon-base\n        repeat.for="each of list"\n        item.bind="each"\n        click.delegate="select(each)"\n        class="${each==selected ? \'selected\' : \'\'}"\n      >${each.name}</icon-base>\n    </ux-dialog-body>\n    <ux-dialog-footer>\n      <button click.trigger="complete()">Close</button>\n    </ux-dialog-footer>\n  </ux-dialog>\n</template>\n'},"resources/elements/active-trigger.html":function(e,n){e.exports='<template bindable="entity, tag">\n  <span\n    if.bind="entity.tags.getValue(tag) & signal:\'generalUpdate\'"\n    click.delegate="entity.tags.delete(tag)"\n  >On</span>\n  <span\n    if.bind="!entity.tags.getValue(tag) & signal:\'generalUpdate\'"\n    click.delegate="entity.tags.push(tag, true)"\n  >Off</span>\n</template>\n'},"resources/elements/byModule/crafting-infopane.html":function(e,n,t){e.exports='<template bindable="crafter, recMgr, itemMgr, actor">\n  <require from="../../value-converters/lib/ObjectFilters"></require>\n  <require from="./upgrades-infopane"></require>\n  <div \n    class="showRecipe ${crafter.crafting_timer!=NaN && \'progressBarBase\'}"\n    if.bind="crafter.recipe"\n    css="border-image-source: linear-gradient(to right, green ${crafter.progress}%, red ${crafter.progress}%)"> \n      Recipe:\n      <icon-base\n        repeat.for="ing of crafter.recipe.ingredients | objectValues"\n        item.bind="itemMgr.itemList[ing.name]"\n        required.bind="ing.amount"\n        count.bind="crafter.buffers.in.total(ing.name) & signal:\'generalUpdate\'"\n        click.delegate="crafter.consumeFrom(actor.inv, ing)"\n      ></icon-base>\n      =&gtcc;\n      <icon-base\n        repeat.for="res of crafter.recipe.results | objectValues"\n        item.bind="itemMgr.itemList[res.name]"\n        required.bind="res.amount"\n        count.bind="crafter.buffers.out.total(res.name) & signal:\'generalUpdate\'"\n        click.delegate="crafter.dump(actor, res)"\n      ></icon-base>\n    </p>\n    <p click.delegate="crafter.clear_recipe()">Clear recipe</p>\n  </div>\n  <div if.bind="!crafter.recipe">\n    <p>Select recipe to craft</p>\n    <div class="overflow">\n      <icon-base repeat.for="rec of recMgr.recipesByTags(\'category\', crafter.crafting_categories)" item.bind="rec" click.delegate="crafter.set_recipe(rec)"\n      class="${rec==crafter.recipe ? \'selected\': \'\'}" mouseenter.bind="(tooltip = rec) & debounce:2000" mouseleave.bind="(tooltip = null) & debounce:2000"></icon-base>\n    </div>\n  </div>\n  <upgrades-infopane entity.bind="crafter" parcel.bind="crafter.parent"></upgrades-infopane>\n</template>\n'},"resources/elements/byModule/lab-infopane.html":function(e,n,t){e.exports='<template bindable="lab, itemMgr, rounder">\n  <require from="./upgrades-infopane"></require>\n  <p>\n    Max Buffer: ${lab.buffers.max_in}\n  </p>\n  <div\n    class="labInput, progressBarBase"\n    css="border-image-source: linear-gradient(to right, green ${lab.progress}%, red ${lab.progress}%)"\n  >\n    <icon-base\n      repeat.for="input of lab.inputs"\n      item.bind="itemMgr.itemList[input]"\n      count.bind="lab.buffers.in.items[$index].count"\n      class="${lab.canAdd(input) ? \'fillable\': \'\'}"\n      click.delegate="lab.addPotion(input, rounder)"\n      title="Click to add ${input}"\n    ></icon-base>\n  </div>\n  <upgrades-infopane entity.bind="lab" parcel.bind="lab.parent"></upgrades-infopane>\n</template>\n'},"resources/elements/byModule/mining-infopane.html":function(e,n,t){e.exports='<template bindable="miner, resMgr, actor">\n  <require from="./upgrades-infopane"></require>\n  <div>\n    <p>Select Resource to Mine</p>\n    <icon-base\n      repeat.for="res of resMgr.resListByTag(\'category\', miner.resource_categories)"\n      item.bind="res"\n      click.delegate="miner.set_mining(res)"\n      class="${res==miner.mining? \'selected\': \'\'}"\n    ></icon-base>\n    <p\n      click.delegate="miner.collectBuffer(actor)"\n      if.bind="miner.mining"\n      class="progressBarBase"\n      css="border-image-source: linear-gradient(to right, green ${miner.progress}%, red ${miner.progress}%)"\n      title="Click to collect">\n      <icon-base\n        item.bind="miner.mining.mining_results"\n        count.bind="miner.buffers.out.total(miner.mining.mining_results) & signal:\'generalUpdate\'"\n      ></icon-base>\n      /${miner.buffers.max_out} (max)\n    </p>\n    <upgrades-infopane entity.bind="miner" parcel.bind="miner.parent"></upgrades-infopane>\n  </div>\n</template>\n'},"resources/elements/byModule/tech-infopane.html":function(e,n){e.exports='<template bindable="tech, techMgr, tooltip">\n  <div>\n    <div><icon-base item.bind="tech"></icon-base>${tech.name}</div>\n    <div if.bind="!tech.researched">\n      <b>Cost</b>\n      <icon-base repeat.for="unit of tech.cost.ingredients" item.bind="unit[0]"></icon-base>\n      x${tech.cost.count - tech.completeUnits}\n    </div>\n    <div>\n      <b>Unlocks</b>\n      <icon-base repeat.for="unlock of tech.unlocks" item.bind="unlock" mouseenter.trigger="tooltip = unlock" mouseleave.trigger="tooltip = null"></icon-base>\n    </div>\n    <button click.delegate="techMgr.select_research(tech)" if.bind="!techMgr.researching && !tech.researched">Research</button>\n    <button click.delegate="techMgr.cancel_research()" if.bind="techMgr.researching == tech">Cancel</button>\n  </div>\n</template>\n'},"resources/elements/byModule/upgrades-infopane":function(e,n,t){"use strict";t.r(n),t.d(n,"upgradesInfopaneCustomElement",(function(){return d}));var i,r,a,o=t("aurelia-framework"),s=t("+Aae");function c(e,n,t,i){t&&Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})}function l(e,n,t,i,r){var a={};return Object.keys(i).forEach((function(e){a[e]=i[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=t.slice().reverse().reduce((function(t,i){return i(e,n,t)||t}),a),r&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(r):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,n,a),a=null),a}var d=(r=l((i=function(){c(this,"entity",r,this),c(this,"parcel",a,this),this.EM=s.a.entity}).prototype,"entity",[o.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),a=l(i.prototype,"parcel",[o.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),i)},"resources/elements/byModule/upgrades-infopane.html":function(e,n){e.exports='<template bindable="entity, parcel">\n  <div>\n    <p if.bind="entity.buffers.in">\n      Input Upgrades\n      <icon-base\n        item="iron-chest"\n        count.bind="entity.buffers.upgrades.in.size"\n        click.delegate="EM.upgrade({type:\'buffers\', dir:\'in\', who: entity})"\n      ></icon-base>\n      <icon-base\n        item="inserter"\n        if.bind="!parcel.isPlayer"\n        count.bind="entity.buffers.upgrades.in.xfer"\n        progress.bind="entity.buffers.upgrades.in.xferProgress"\n        click.delegate="EM.upgrade({type:\'autoload\', dir:\'in\', who: entity})"\n      ></icon-base>\n      <active-trigger entity.bind="entity" tag="inputTicker" if.bind="entity.buffers.upgrades.in.xfer>0"></active-trigger>\n    </p>\n    <p if.bind="entity.buffers.out">\n      Output Upgrades\n      <icon-base\n        item="iron-chest"\n        count.bind="entity.buffers.upgrades.out.size"\n        click.delegate="EM.upgrade({type:\'buffers\', dir:\'out\', who: entity})"\n      ></icon-base>\n      <icon-base\n        item="inserter"\n        count.bind="entity.buffers.upgrades.out.xfer"\n        if.bind="!parcel.isPlayer"\n        progress.bind="entity.buffers.upgrades.out.xferProgress"\n        click.delegate="EM.upgrade({type:\'autoload\', dir:\'out\', who: entity})"\n      ></icon-base>\n      <active-trigger entity.bind="entity" tag="outputTicker" if.bind="entity.buffers.upgrades.out.xfer>0"></active-trigger>\n    </p>\n  </div>\n</template>\n'},"resources/elements/dataEditor":function(e,n,t){"use strict";t.r(n),t.d(n,"DataEditor",(function(){return f})),t.d(n,"ListSuggestionService",(function(){return m}));var i,r,a,o=t("aurelia-framework"),s=t("+Aae"),c=t("Iab2");var l,d,u,p,g,b,f=(a=function(){function e(){var e,n,t,i;this.editList=null,e=this,n="editType",i=this,(t=r)&&Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0}),s.a.de=this}var n=e.prototype;return n.editTypeChanged=function(e){this.editList=Object.keys(s.a.data[e]),this.suggestions=new m(e),this.editing=null},n.selectEdit=function(e){this.editing=s.a.data[this.editType][e]},n.addNew=function(){this.editing={type:this.editType}},n.saveItem=function(){s.a.data[this.editType][this.editing.name]=this.editing,this.editing=null},n.deleteItem=function(){delete s.a.data[this.editType][this.editing.name],this.editing=null},n.saveDataSet=function(){s.a.idb.set("dataSet",s.a.data)},n.dlDataSet=function(){var e=new File([JSON.stringify(s.a.data)],"data_source.json",{type:"application/json"});Object(c.saveAs)(e)},n.close=function(){s.a.baseApp.viewPane.version="beta"},e}(),l=(i=a).prototype,d="editType",u=[o.e],p={configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}},b={},Object.keys(p).forEach((function(e){b[e]=p[e]})),b.enumerable=!!b.enumerable,b.configurable=!!b.configurable,("value"in b||b.initializer)&&(b.writable=!0),b=u.slice().reverse().reduce((function(e,n){return n(l,d,e)||e}),b),g&&void 0!==b.initializer&&(b.value=b.initializer?b.initializer.call(g):void 0,b.initializer=void 0),void 0===b.initializer&&(Object.defineProperty(l,d,b),b=null),r=b,i),m=function(){function e(e){this.type=e}var n=e.prototype;return n.suggest=function(e){if(""===e)return Promise.resolve([]);e=e.toLowerCase();var n=s.a.data[this.type].filter((function(n){return 0===n.name.toLowerCase().indexOf(e)})).map((function(e){return e.name}));return Promise.resolve(n)},n.getName=function(e){return e},e}()},"resources/elements/dataEditor.html":function(e,n,t){e.exports='<template>\n  <require from="./dataEditor.scss"></require>\n  <header>\n    <h5 click.delegate="editType=\'item\'">Items</h5>\n    <h5 click.delegate="editType=\'recipe\'">Recipes</h5>\n    <h5 click.delegate="editType=\'technology\'">Technologies</h5>\n    <h5 click.delegate="editType=\'resource\'">Resources</h5>\n    <h5 click.delegate="editType=\'entity\'">Entities</h5>\n    \x3c!-- h5 click.delegate="editType=\'icons\'">Icons</!--\x3e\n  </header>\n  <aside id="editorList">\n    <span click.delegate="addNew()" if.bind="editType">New...</span>\n    <ul class="list-group">\n      <li \n        repeat.for="each of editList"\n        class="list-group-item"\n        class.bind="editing.name == each ? \'active\' : \'\'"\n        click.delegate="selectEdit(each)"\n        >\n        ${each}\n      </li>\n    </ul>\n  </aside>\n  <main>\n    <div if.bind="editing">\n      <div if.bind="editType==\'item\'">\n        Name: <input type="text" value.bind="editing.name"><br>\n        Icon: <input type="text" value.bind="editing.icon"><br>\n        StackSize: <input type="text" value.bind="editing.stack_size">\n      </div>\n      <div if.bind="editType==\'recipe\'">\n        Name: <input type="text" value.bind="editing.name"><br>\n        Icon: <input type="text" value.bind="editing.icon"><br>\n        Time: <input type="number" value.bind="editing.crafting_speed">\n        Enabled: <input type="checkbox" value.bind="editing.enabled"><br>\n        Ingredients: <textarea value.bind="editing.ingredients | jsonString" rows="6"></textarea><br>\n        Results: <textarea value.bind="editing.results | jsonString" rows="6"></textarea><br>\n      </div>\n      <div if.bind="editType==\'technology\'">\n        Name: <input type="text" value.bind="editing.name"><br>\n        Icon: <input type="text" value.bind="editing.icon"><br>\n        Enabled: <input type="checkbox" value.bind="editing.enabled">\n        Hidden: <input type="checkbox" value.bind="editing.hidden"><br>\n        Prereqs:<textarea value.bind="editing.prerequisites | jsonString" rows="6"></textarea><br>\n        Unlocks:<textarea value.bind="editing.unlocks | jsonString" rows="6"></textarea><br>\n        Cost: <input type="number" value.bind="editing.cost.count">\n        Time: <input type="number" value.bind="editing.cost.time"><br>\n        Ingredients: <textarea value.bind="editing.cost.ingredients | jsonString" rows="6"></textarea>\n      </div>\n      <div if.bind="editType==\'resource\'">\n        Name: <input type="text" value.bind="editing.name"><br>\n        Icon: <input type="text" value.bind="editing.icon"><br>\n        Time: <input type="numebr" value.bind="editing.mining_time">\n        Results: <input type="text" value.bind="editing.mining_results"><br>\n        Cat:  <input type="text" value.bind="editing.category">\n      </div>\n      <div if.bind="editType==\'entity\'">\n        Name: <input type="text" value.bind="editing.name"><br> \n        Icon: <input type="text" value.bind="editing.icon"><br>\n        <hr>\n        Craft: <textarea value.bind="editing.crafting_categories"></textarea>\n        Speed:<input type="number" value.bind="editing.crafting_speed">\n        <hr>\n        ResC: <textarea value.bind="editing.resource_categories"></textarea>\n        Speed:<input type="number" value.bind="editing.mining_speed">\n        <hr>\n        Labs: <textarea value.bind="editing.inputs"></textarea>\n        Speed: <input type="number" value.bind="editing.researching_speed">\n      </div>\n    </div>\n    <div if.bind="editType==\'icons\'">\n      <div if.bind="editing">\n        ${editing.name}\n      </div>\n      <div if.bind="!editing">\n        Icons\n      </div>\n    </div>\n  </main>\n  <footer class="btn-group">\n    <span class="btn btn-secondary" click.delegate="editing = null" if.bind="editing">cancel</span>\n    <span class="btn btn-secondary" click.delegate="close()" if.bind="!editing">Close</span>\n    <span class="btn btn-danger" click.delegate="deletItem()" if.bind="editing">Delete</span>\n    <span class="btn btn-success" click.delegate="saveItem()">save Item</span>\n    <span class="btn btn-info" click.delegate="saveDataSet()">save list</span>\n    <span class="btn btn-light" click.delegate="dlDataSet()">download</span>\n  </footer>\n</template>\n'},"resources/elements/dataEditor.scss":function(e,n,t){(n=t("JPst")(!1)).push([e.i,"data-editor{width:100%;height:100%;position:relative;display:grid;grid-template-columns:20% auto;grid-template-rows:10% auto max(8%,15px);-moz-column-gap:10px;column-gap:10px;row-gap:5px}data-editor header{overflow-x:auto;grid-row:1/2;grid-column:1/3}data-editor header h5{display:inline-block}data-editor aside{overflow-y:scroll;overflow-x:auto;grid-row:2/3;grid-column:1/2}data-editor aside::-webkit-scrollbar{width:10px}data-editor aside ol{list-style-type:none;-webkit-padding-start:0;padding-inline-start:0}data-editor main{grid-row:2/3;grid-column:2/3;overflow-y:auto}data-editor footer{grid-row:3/4;grid-column:1/3}data-editor textarea{resize:both;width:100%}data-editor input,data-editor textarea{background-color:#483d8b;color:#db7093}data-editor .list-group .list-group-item{padding:2px 4px;background-color:#483d8b}#editDataSource{height:100vh;width:100vw}",""]),e.exports=n}}]);
//# sourceMappingURL=app~d055f38d.1b0fd46ab86998016d60.bundle.map