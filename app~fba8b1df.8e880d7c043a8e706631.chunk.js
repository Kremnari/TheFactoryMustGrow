(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"3Qvj":function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var i=t("aurelia-dialog"),s=t("resources/dialogs/SelectBus"),o=t("resources/dialogs/SelectRecipe"),a=t("resources/dialogs/SelectX"),r=function(){function e(e){this.ds=e,this.modals={SelectBus:s.SelectBus,SelectRecipe:o.SelectRecipe,SelectX:a.SelectX}}return e.prototype.open=function(e,n,t){var i=this;return void 0===t&&(t=!1),new Promise((function(s,o){i.ds.open({viewModel:i.modals[e],model:n,lock:t}).whenClosed((function(e){return s(e.output)}))}))},e}();r.inject=[i.DialogService]},"resources/attributes/loading":function(e,n,t){"use strict";var i;t.r(n),t.d(n,"LoadingAnimCustomAttribute",(function(){return s}));var s=function(){function e(e){this.element=e,this.inner=e.cloneNode(!0)}return e.prototype.valueChanged=function(e){e&&this.element.replaceWith(this.inner),e||this.element.replaceWith(i)},e}();s.inject=[Element],s.setLoadingElem=function(e){i=document.querySelector(e).cloneNode(!0)}},"resources/components/tabPopout":function(e,n,t){"use strict";t.r(n),t.d(n,"TabPopout",(function(){return i}));var i=function(){this.id="tabPopout"+Math.ceil(1e3*Math.random())}},"resources/components/tabPopout.html":function(e,n,t){e.exports='<template>\n  <require from="./tabPopout.scss"></require>\n  <input type="checkbox" class="tab_toggle" id.one-time="id">\n  <label for.one-time="id">\n    <slot name="tab">\n      Tab Name Goes Here\n    </slot>\n  </label>\n  <slot name="content">\n    Random Content!\n  </slot>\n</template>\n'},"resources/components/tabPopout.scss":function(e,n,t){(n=t("JPst")(!1)).push([e.i,"tab-popout{position:fixed}tab-popout>.tab_toggle{display:none}tab-popout>label{padding:2px 3vh;background-color:hsla(0,0%,49.8%,.5);text-align:center;margin:0;position:absolute;display:inline-block}tab-popout>label .tabOnly{display:inline}tab-popout [slot=content]{display:none}tab-popout>input[type=checkbox]:checked~[slot=content]{display:block}tab-popout>input[type=checkbox]:checked~[slot=content]>*{display:inline-block}tab-popout>input[type=checkbox]:checked~label .tabOnly{display:none}tab-popout.tab_bottom_left{bottom:0;left:0}tab-popout.tab_bottom_left>label{transform:translateX(-100%) rotate(90deg);transform-origin:bottom right;bottom:0;left:0}tab-popout.tab_bottom_left>.tab_toggle:checked~label{left:70px;padding:2px 75%;transform:translate(-100%,-150%) rotate(90deg)}tab-popout.tab_bottom_right{bottom:0;right:0}tab-popout.tab_bottom_right>label{transform:translateX(100%) rotate(-90deg);transform-origin:bottom left;bottom:0;right:0}tab-popout.tab_bottom_right>.tab_toggle:checked~label{right:70px;padding:2px 75%;transform:translate(100%,-150%) rotate(-90deg);bottom:unst}",""]),e.exports=n},"resources/dialogs/SelectBus":function(e,n,t){"use strict";t.r(n),t.d(n,"SelectBus",(function(){return s}));var i=t("aurelia-dialog"),s=function(){function e(e){this.controller=e}var n=e.prototype;return n.activate=function(e){var n;this.options=(null==(n=e.base)?void 0:n.facBlocks)||e.buses,this.selected=null},n.selectedChanged=function(e){console.log(e)},n.complete=function(){this.controller.ok({selected:this.selected})},e}();s.inject=[i.DialogController]},"resources/dialogs/SelectBus.html":function(e,n){e.exports='<template>\n  <ux-dialog>\n    <ux-dialog-header>Select Bus</ux-dialog-header>\n    <ux-dialog-body>\n      <div repeat.for="block of options" click.trigger="selected = (block == selected && undefined ) || block">\n        <span class.bind="block==selected && \'button\'">\n        ${block.name+":"+block.type}\n        </span>\n      </div>\n    </ux-dialog-body>\n    <ux-dialog-footer>\n      <button click.trigger="complete()">Close</button>\n    </ux-dialog-footer>\n  </ux-dialog>\n</template>\n'},"resources/dialogs/SelectRecipe":function(e,n,t){"use strict";t.r(n),t.d(n,"SelectRecipe",(function(){return o}));var i=t("aurelia-dialog"),s=t("+Aae"),o=function(){function e(e,n){this.selected=null,this.controller=e,this.mgrs=n}var n=e.prototype;return n.activate=function(e){var n,t=this;this.model=e,Object.entries(e.tags).forEach((function(e){var i=e[0],s=e[1];n=t.mgrs.rec.recipesByTags(i,s,n)})),this.recList=n},n.select=function(e){this.selected=e==this.selected?null:e},n.complete=function(){this.controller.ok({recipe:this.selected})},e}();o.inject=[i.DialogController,s.a]},"resources/dialogs/SelectRecipe.html":function(e,n){e.exports='<template>\n  <ux-dialog>\n    <ux-dialog-header>Select Recipe</ux-dialog-header>\n    <ux-dialog-body>\n      <icon-base\n        repeat.for="rec of recList"\n        item.bind="rec"\n        click.delegate="select(rec)"\n        class="${rec==selected ? \'selected\' : \'\'}"\n      ></icon-base>\n    </ux-dialog-body>\n    <ux-dialog-footer>\n      <button click.trigger="complete()">Done</button>\n    </ux-dialog-footer>\n  </ux-dialog>\n</template>\n'},"resources/dialogs/SelectX":function(e,n,t){"use strict";t.r(n),t.d(n,"SelectX",(function(){return o}));var i=t("aurelia-dialog"),s=t("+Aae"),o=function(){function e(e,n){this.selected=null,this.controller=e,this.mgrs=n}var n=e.prototype;return n.activate=function(e){this.list=e.list,this.type=e.type,this.selected=e.default},n.select=function(e){this.selected=e==this.selected?null:e},n.complete=function(){this.selected?this.selected.icon?this.controller.ok({item:this.selected}):this.controller.ok({item:this.selected.$_id}):this.controller.ok({})},e}();o.inject=[i.DialogController,s.a]},"resources/dialogs/SelectX.html":function(e,n){e.exports='<template>\n  <ux-dialog>\n    <ux-dialog-header>Select ${type}</ux-dialog-header>\n    <ux-dialog-body>\n      <div if.bind="list[0].icon">\n        <icon-base\n          repeat.for="each of list"\n          item.bind="each"\n          click.delegate="select(each)"\n          class="${each==selected ? \'selected\' : \'\'}"\n        >${each.name}</icon-base>\n      </div>\n      <div if.bind="!list[0].icon">\n        <p  \n          repeat.for="each of list"\n          click.delegate="select(each)"\n          class="${each==selected ? \'selected\' : \'\'}"\n          >${each.name}</p>\n      </div>\n    </ux-dialog-body>\n    <ux-dialog-footer>\n      <button click.trigger="complete()">Close</button>\n    </ux-dialog-footer>\n  </ux-dialog>\n</template>\n'},"resources/elements/active-trigger.html":function(e,n){e.exports='<template bindable="entity, tag">\n  <span\n    if.bind="entity.$_tags.has(tag) & signal:\'generalUpdate\'"\n    click.delegate="entity.$_tags.delete(tag)"\n  >On</span>\n  <span\n    if.bind="!entity.$_tags.has(tag) & signal:\'generalUpdate\'"\n    click.delegate="entity.$_tags.push(tag, true)"\n  >Off</span>\n</template>\n'},"resources/elements/byModule/crafting-infopane.html":function(e,n,t){e.exports='<template>\n  <scope-var var.bind="$scope = {crafter: viewPane.showingItem}"></scope-var>\n  <require from="../../value-converters/lib/ObjectFilters"></require>\n  <require from="./upgrades-infopane"></require>\n  <div \n    class="showRecipe ${$scope.crafter.process_timer!=NaN && \'progressBarBase\'}"\n    if.bind="$scope.crafter.processing"\n    css="border-image-source: linear-gradient(to left, red ${$scope.crafter.process_timer}%, green ${$scope.crafter.process_timer}%)"> \n      Recipe:\n      <icon-base\n        repeat.for="ing of $scope.crafter.processing.ingredients | objectValues"\n        item.bind="ing.name"\n        required.bind="ing.amount"\n        count.bind="CCC.utilityFn(\'inventory.total\', $scope.crafter.buffers.in, {name: ing.name}) & signal:\'generalUpdate\'"\n        click.delegate="CCC.issue(\'entity.bufferFill\', {\'which.buffer\': $scope.crafter.buffers.in, \'item.idx\': $index}, $event)"\n      ></icon-base>\n      =&gtcc;\n      <icon-base\n        repeat.for="res of $scope.crafter.processing.results | objectValues"\n        item.bind="res.name"\n        required.bind="res.amount"\n        count.bind="CCC.utilityFn(\'inventory.total\', $scope.crafter.buffers.out, {name: res.name}) & signal:\'generalUpdate\'"\n        click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': $scope.crafter.buffers.out, \'item.idx\': $index}, $event)"\n      ></icon-base>\n    </p>\n    <p click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': null, \'type.class\': null}, $event)">Clear recipe</p>\n  </div>\n  <div if.bind="!$scope.crafter.processing">\n    <p>Select recipe to craft</p>\n    <div class="overflow">\n      <icon-base\n        repeat.for="rec of ChameView.viewFn.recipeFilter($scope.crafter.crafting_categories) | objectValues & signal:\'generalUpdate\'"\n        item.bind="rec"\n        click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': rec, \'type.class\': \'crafting\'}, $event)"\n        class="${rec==$scope.crafter.processing ? \'selected\': \'\'}"\n        mouseenter.bind="(tooltip = rec) & debounce:2000"\n        mouseleave.bind="(tooltip = null) & debounce:2000"\n      ></icon-base>\n    </div>\n  </div>\n  <compose view="resources/elements/byModule/upgrades-infopane.html"></compose>\n</template>\n'},"resources/elements/byModule/lab-infopane.html":function(e,n,t){e.exports='<template>\n  <scope-var var.bind="$scope = {lab: viewPane.showingItem}"\n  <require from="./upgrades-infopane"></require>\n  <p>\n    Max Buffer: ${IgorJs.getObjId($scope.miner.buffers.out).stackSize}\n  </p>\n  <div\n    class="labInput progressBarBase"\n    css="border-image-source: linear-gradient(to right, green ${$scope.lab.research_timer/$scope.lab.research_time*100}%, red ${$scope.lab.research_timer/$scope.lab.research_time*100}%)"\n  >\n    <icon-base\n      repeat.for="input of $scope.lab.inputs"\n      item.bind="input"\n      count.bind="CCC.utilityFn(\'inventory.total\', $scope.lab.buffers.in, {name: input}) & signal:\'generalUpdate\'"\n      click.delegate="CCC.issue(\'entity.bufferFill\', {\'which.buffer\': $scope.lab.buffers.in, \'item.idx\': $index}, $event)"\n      title="Click to add ${input}"\n    ></icon-base>\n  </div>\n  <compose view="resources/elements/byModule/upgrades-infopane.html"></compose>\n</template>\n'},"resources/elements/byModule/mining-infopane.html":function(e,n,t){e.exports='<template>\n  <require from="./upgrades-infopane"></require>\n  <scope-var var.bind="$scope = {miner: viewPane.showingItem}"></scope-var>\n  <div>\n    <p>Select Resource to Mine</p>\n    <icon-base\n      repeat.for="res of dataSet.resource | filter:{key:\'category\', value:$scope.miner.resource_categories, includeUndefs: true} | objectValues"\n      item.bind="res"\n      click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': res, \'type.class\':\'mining\'}, $event)"\n      class="${res==$scope.miner.processing ? \'selected\': \'\'}"\n    ></icon-base>\n    <br>\n    <p\n      click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': $scope.miner.buffers.out, \'item.idx\': 0}, $event)"\n      if.bind="$scope.miner.processing"\n      class="progressBarBase"\n      css="border-image-source: linear-gradient(to left, red ${$scope.miner.process_timer}%, green ${$scope.miner.process_timer}%)"\n      title="Click to collect">\n      <icon-base\n        item.bind="$scope.miner.processing.mining_results"\n        count.bind="CCC.utilityFn(\'inventory.total\', $scope.miner.buffers.out, {name: $scope.miner.processing.mining_results}) & signal:\'generalUpdate\'"\n      ></icon-base>\n      /${IgorJs.getObjId($scope.miner.buffers.out).stackSize} (max)\n    </p>\n    <compose view="resources/elements/byModule/upgrades-infopane.html" entity.bind="$scope.miner" parcel.bind="$scope.miner.parent"></compose>\n  </div>\n</template>\n'},"resources/elements/byModule/tech-infopane.html":function(e,n){e.exports='<template>\n  <scope-var var.bind="$scope = {tech: viewPane.showingItem}"></scope-var>\n  <div click.capture="CCC.provide($event, \'which\', \'tech\', $scope.tech)">\n    <div><icon-base item.bind="$scope.tech"></icon-base>${$scope.tech.name}</div>\n    <div if.bind="!$scope.tech.researched">\n      <strong>Cost</strong>\n      <icon-base repeat.for="unit of $scope.tech.cost.ingredients" item.bind="unit[0]"></icon-base>\n      x${$scope.tech.cost.count - $scope.tech.completeUnits}\n    </div>\n    <div>\n      <strong>Unlocks</strong>\n      <div repeat.for="unlock of $scope.tech.unlocks">\n        <icon-base if.bind="typeof unlock === \'string\'" item.bind="unlock" mouseenter.trigger="tooltip = unlock" mouseleave.trigger="tooltip = null"></icon-base>\n        <span if.bind="typeof unlock === \'object\'">Feature: ${unlock.feature}</span>\n      </div>\n    </div>\n    <button click.delegate="CCC.issue(\'research.set\', {}, $event)" if.bind="!globals.researching && !$scope.tech.researched" id="StartResearch">Research</button>\n    <button click.delegate="CCC.issue(\'research.clear\', {}, $event)" if.bind="globals.researching == $scope.tech">Cancel</button>\n  </div>\n</template>\n'},"resources/elements/byModule/upgrades-infopane":function(e,n,t){"use strict";t.r(n),t.d(n,"upgradesInfopaneCustomElement",(function(){return d}));var i,s,o,a=t("aurelia-framework"),r=t("+Aae");function c(e,n,t,i){t&&Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})}function l(e,n,t,i,s){var o={};return Object.keys(i).forEach((function(e){o[e]=i[e]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=t.slice().reverse().reduce((function(t,i){return i(e,n,t)||t}),o),s&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(s):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,n,o),o=null),o}var d=(s=l((i=function(){c(this,"entity",s,this),c(this,"parcel",o,this),this.EM=r.a.entity}).prototype,"entity",[a.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),o=l(i.prototype,"parcel",[a.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),i)},"resources/elements/byModule/upgrades-infopane.html":function(e,n){e.exports='<template>\n  <scope-var var.bind="$scope.entity = viewPane.showingItem"></scope-var>\n  <div>\n    <p\n        if.bind="$scope.entity.buffers.in"\n        click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.entity.buffers.in)"\n      >\n      <scope-var var.bind="$scope.inBuffer = IgorJs.getObjId($scope.entity.buffers.in)"></scope-var>\n      Input Upgrades\n      <icon-base\n        item="iron-chest"\n        count.bind="$scope.inBuffer.upgrades.bufferSize.count"\n        click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'buffer\'}, $event)"\n      ></icon-base>\n      <icon-base\n        item="inserter"\n        if.bind="!parcel.isPlayer"\n        count.bind="$scope.inBuffer.upgrades.loader.count"\n        progress.bind="$scope.inBuffer.xferTimer"\n        click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'autoload\'}, $event)"\n      ></icon-base>\n      <active-trigger\n          entity.bind="$scope.entity"\n          tag="inputTicker"\n          if.bind="$scope.inBuffer.xfer>0"\n        ></active-trigger>\n    </p>\n    <p\n        if.bind="$scope.entity.buffers.out"\n        click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.entity.buffers.out)"\n      >\n      <scope-var var.bind="$scope.outBuffer = IgorJs.getObjId($scope.entity.buffers.out)"></scope-var>\n      Output Upgrades\n      <icon-base\n        item="iron-chest"\n        count.bind="$scope.outBuffer.upgrades.bufferSize.count"\n        click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'buffer\'}, $event)"\n      ></icon-base>\n      <icon-base\n        item="inserter"\n        if.bind="!parcel.isPlayer"\n        count.bind="$scope.outBuffer.upgrades.loader.count"\n        progress.bind="$scope.outBuffer.xferTimer"\n        click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'autoload\'}, $event)"\n      ></icon-base>\n      <active-trigger\n          entity.bind="$scope.entity"\n          tag="outputTicker"\n          if.bind="$scope.outBuffer.xfer>0"\n        ></active-trigger>\n    </p>\n  </div>\n</template>\n'},"resources/elements/dataEditor":function(e,n,t){"use strict";t.r(n),t.d(n,"DataEditor",(function(){return g})),t.d(n,"ListSuggestionService",(function(){return m}));var i,s,o,a=t("aurelia-framework"),r=t("+Aae"),c=t("Iab2");var l,d,u,p,f,b,g=(o=function(){function e(){var e,n,t,i;this.editList=null,this.eTypes=["crafter","miner","research","defense","offense"],e=this,n="editType",i=this,(t=s)&&Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0}),r.a.de=this,this.mgrs=r.a}var n=e.prototype;return n.detached=function(){this.editing=null,this.editList=null,this.editType=null},n.editTypeChanged=function(e){if(e){if("icons"==e)return this.editList=null,void(this.editing=null);this.editList=r.a.data[e],this.editing=null}},n.selectEdit=function(e){this.editing=r.a.data[this.editType][e],"entity"==this.editType&&(this.editing.crafting_categories?(this.eTypeSelect="crafter",this.editing.subType="crafter"):this.editing.resource_categories?(this.eTypeSelect="miner",this.editing.subType="miner"):this.editing.inputs?(this.eTypeSelect="research",this.editing.subType="research"):this.editing.defense_value?(this.eTypeSelect="defense",this.editing.subType="defense"):this.editing.offense_value&&(this.eTypeSelect="offense",this.editing.subType="offense"))},n.addNew=function(){this.editing={type:this.editType},"recipe"==this.editType&&(this.editing.ingredients=[{name:"__someitem__",amount:1}],this.editing.category="crafting",this.editing.results=[{name:"__someitem__",amount:1}],this.editing.enabled=!1),"technology"==this.editType&&(this.editing.prerequisites=["__sometech__"],this.editing.unlocks=["__somerecipe__"],this.editing.cost={ingredients:[["automation-science-pack",1]]})},n.saveItem=function(){"research"==this.eTypeSelect&&"string"==typeof this.editing.inputs&&(this.editing.inputs=this.editing.inputs.split(",")),r.a.data[this.editType][this.editing.name]=this.editing,this.editing=null},n.deleteItem=function(){delete r.a.data[this.editType][this.editing.name],delete this.editList[this.editing.name],this.editing=null},n.saveDataSet=function(){r.a.idb.set("dataSet",r.a.data),this.editList=null,this.editType=null},n.dlDataSet=function(){var e=new File([JSON.stringify(r.a.data)],"data_source.json",{type:"application/json"});Object(c.saveAs)(e)},n.close=function(){r.a.baseApp.viewPane.version="beta"},e}(),l=(i=o).prototype,d="editType",u=[a.e],p={configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}},b={},Object.keys(p).forEach((function(e){b[e]=p[e]})),b.enumerable=!!b.enumerable,b.configurable=!!b.configurable,("value"in b||b.initializer)&&(b.writable=!0),b=u.slice().reverse().reduce((function(e,n){return n(l,d,e)||e}),b),f&&void 0!==b.initializer&&(b.value=b.initializer?b.initializer.call(f):void 0,b.initializer=void 0),void 0===b.initializer&&(Object.defineProperty(l,d,b),b=null),s=b,i),m=function(){function e(e){this.type=e}var n=e.prototype;return n.suggest=function(e){if(""===e)return Promise.resolve([]);e=e.toLowerCase();var n=r.a.data[this.type].filter((function(n){return 0===n.name.toLowerCase().indexOf(e)})).map((function(e){return e.name}));return Promise.resolve(n)},n.getName=function(e){return e},e}()},"resources/elements/dataEditor.html":function(e,n,t){e.exports='<template>\n  <require from="./dataEditor.scss"></require>\n  <require from="./iconEditor"></require>\n  <header>\n    <h5 click.delegate="editType=\'item\'">Items</h5>\n    <h5 click.delegate="editType=\'recipe\'">Recipes</h5>\n    <h5 click.delegate="editType=\'technology\'">Technologies</h5>\n    <h5 click.delegate="editType=\'resource\'">Resources</h5>\n    <h5 click.delegate="editType=\'entity\'">Entities</h5>\n    <h5 click.delegate="editType=\'icons\'">Icons</h5>\n  </header>\n  <main>\n    <div if.bind="!editing">\n      <ul class="icon-list">\n        <img\n          repeat.for="each of editList | objectValues"\n          src.bind="mgrs.icon.getSrc(each.icon)"\n          click.delegate="selectEdit(each.name)"\n          >\n        </img>\n      </ul>\n    </div>\n    <div if.bind="editType==\'icons\'">\n      <icon-editor></icon-editor>\n    </div>\n    <div if.bind="editing">\n      Name: <input type="text" value.bind="editing.name"><br>\n      Icon: <input type="text" value.bind="editing.icon"><br>\n      <img src.bind="mgrs.icon.getSrc(editing.icon)"></img>\n    <div if.bind="editType==\'item\'">\n        StackSize: <input type="text" value.bind="editing.stack_size">\n      </div>\n      <div if.bind="editType==\'recipe\'">\n        Time: <input type="number" value.bind="editing.crafting_speed">\n        Enabled: <input type="checkbox" checked.bind="editing.enabled"><br>\n        Category: <input type="text" value.bind="editing.category"><br>\n        Ingredients: <textarea value.bind="editing.ingredients | jsonString" rows="6"></textarea><br>\n        Results: <textarea value.bind="editing.results | jsonString" rows="6"></textarea><br>\n      </div>\n      <div if.bind="editType==\'technology\'">\n        Enabled: <input type="checkbox" checked.bind="editing.enabled">\n        Hidden: <input type="checkbox" checked.bind="editing.hidden"><br>\n        Prereqs:<textarea value.bind="editing.prerequisites | jsonString" rows="6"></textarea><br>\n        Unlocks:<textarea value.bind="editing.unlocks | jsonString" rows="6"></textarea><br>\n        Cost: <input type="number" value.bind="editing.cost.count">\n        Time: <input type="number" value.bind="editing.cost.time"><br>\n        Ingredients: <textarea value.bind="editing.cost.ingredients | jsonString" rows="6"></textarea>\n      </div>\n      <div if.bind="editType==\'resource\'">\n        Time: <input type="numebr" value.bind="editing.mining_time">\n        Results: <input type="text" value.bind="editing.mining_results"><br>\n        Cat:  <input type="text" value.bind="editing.category">\n      </div>\n      <div if.bind="editType==\'entity\'">\n        Space used: <input value.bind="editing.space"></input>\n        <fieldset>\n          <label repeat.for="eType of eTypes">\n            <input type="radio" name="eType" value.bind="eType" checked.bind="eTypeSelect">\n            ${eType}\n          </label>\n        </fieldset>\n        <div if.bind="eTypeSelect==\'crafter\'">\n          <h5>Crafter</h5>\n          CraftCats: <textarea value.bind="editing.crafting_categories"></textarea>\n          Speed:<input type="number" value.bind="editing.crafting_speed">\n        </div>\n        <div if.bind="eTypeSelect==\'miner\'">\n          <h5>Miner</h5>\n          ResCats: <textarea value.bind="editing.resource_categories"></textarea>\n          Speed:<input type="number" value.bind="editing.mining_speed">\n        </div>\n        <div if.bind="eTypeSelect==\'research\'">\n          <h5>Researcher</h5>\n          Inputs: <textarea value.bind="editing.inputs"></textarea>\n          Speed: <input type="number" value.bind="editing.researching_speed">\n        </div>\n        <div if.bind="eTypeSelect==\'defense\'">\n          <h5>Defense</h5>\n          Value: <input type="number" value.bind="editing.defense_value">\n          Range: <input type="number" value.bind="editing.defense_range">\n        </div>\n        <div if.bind="eTypeSelect==\'offense\'">\n          <h5>Offense</h5>\n          Attack: <input type="number" value.bind="editing.offense_value">\n          Supply: <input type="number" value.bind="editing.offense_supply">\n          Radar: <input type="number" value.bind="editing.radar">\n        </div>\n      </div>\n    </div>\n    <div if.bind="editType==\'icons\'">\n      <div if.bind="editing">\n        ${editing.name}\n      </div>\n      <div if.bind="!editing">\n        Icons\n      </div>\n    </div>\n  </main>\n  <footer class="btn-group">\n    <span class="btn btn-secondary" click.delegate="editing = null" if.bind="editing">cancel</span>\n    <span class="btn btn-danger" click.delegate="deleteItem()" if.bind="editing">Delete</span>\n    <span class="btn btn-success" click.delegate="saveItem()" if.bind="editing">save Item</span>\n    \n    <span class="btn btn-secondary" click.delegate="close()" if.bind="!editing">Close</span>\n    <span class="btn btn-primary" click.delegate="addNew()" if.bind="!editing && editType">Add</span>\n    <span class="btn btn-info" click.delegate="saveDataSet()" if.bind="!editing">save list</span>\n    <span class="btn btn-light" click.delegate="dlDataSet()" if.bind="!editing">download</span>\n  </footer>\n</template>\n'},"resources/elements/dataEditor.scss":function(e,n,t){(n=t("JPst")(!1)).push([e.i,"data-editor{width:100%;height:100%;position:relative;display:grid;grid-template-columns:20% auto;grid-template-rows:10% auto max(8%,15px);-moz-column-gap:10px;column-gap:10px;row-gap:5px}data-editor header{overflow-x:auto;grid-row:1/2;grid-column:1/3}data-editor header h5{display:inline-block}data-editor aside{overflow-y:scroll;overflow-x:auto;grid-row:2/3;grid-column:1/2}data-editor aside::-webkit-scrollbar{width:10px}data-editor aside ol{list-style-type:none;-webkit-padding-start:0;padding-inline-start:0}data-editor main{grid-row:2/3;grid-column:1/3;overflow-y:auto}data-editor footer{grid-row:3/4;grid-column:1/3}data-editor textarea{resize:both;width:100%}data-editor input,data-editor textarea{background-color:#483d8b;color:#db7093}data-editor .list-group .list-group-item{padding:2px 4px;background-color:#483d8b}data-editor img{max-height:48px;max-width:48px;min-width:16px;min-height:16px;border:2px dotted #006400;border-radius:4px}#editDataSource{height:100vh;width:100vw}",""]),e.exports=n},"resources/elements/factoryBlocks/busView.html":function(e,n){e.exports="<template>\n  I'm a bus\n</template>\n"},"resources/elements/factoryBlocks/mainView.html":function(e,n){e.exports='<template>\n<scope-var var.bind="$scope={facBlock: viewPane.facBlock}"></scope-var>\n<section id="viewFacBlock" click.capture="CCC.provide($event, \'at\', \'factoryBlock\', $scope.facBlock )" class="container">\n  <div class=\'row\'>\n    <span class="col-sm">Land Size : ${$scope.facBlock.size}</span>\n    <span class="col-sm">-- ${$scope.facBlock.name} --</span>\n    <span class="col-sm">Complexity: ${$scope.facBlock.complexity}</span>\n  </div>\n  <div class="row">\n    <div\n        if.bind="$scope.facBlock.buffers.in"\n        click.capture="CCC.provide($event, \'at\', \'factoryXput\', $scope.facBlock.connections.source)"\n        class="col-4">\n      Input:\n      <span\n            class="connection"\n            click.delegate="CCC.issue(\'factoryBlock.setConnection\', \n              {\'dir.string\': \'source\', \'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses)}, $event)">\n        ${IgorJs.getObjId($scope.facBlock.connections.source).name || "none"}</span>\n      <div>\n        <span repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.in).items & signal:\'generalUpdate\'">\n          <span\n              class="fas fa-level-up-alt fa-rotate-90"\n              if.bind="item.name"\n              click.delegate="CCC.issue(\'entity.bufferFill\', {\'which.buffer\': IgorJs.getObjId($scope.facBlock.buffers.in), \'item.buffer\': item, \'at.entity\': \'temp_null\'}, $event)"\n            ></span>\n        <icon-base if.bind="item" item.bind="item" count.bind="item.count"></icon-base>\n        </span>\n      </div>\n    </div>\n    <div\n        if.bind="$scope.facBlock.buffers.internal"\n        click.capture="CCC.provide($event, \'at\', \'factoryXput\', $scope.facBlock.buffers.internal)"\n        class="col-4">\n      Internal:\n      <div>\n        <span repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.internal).items & signal:\'generalUpdate\'">\n          <span\n              class="fas fa-level-up-alt fa-rotate-90"\n              if.bind="item.name"\n              click.delegate="CCC.issue(\'entity.bufferFill\', {\'which.buffer\': IgorJs.getObjId($scope.facBlock.buffers.internale), \'item.buffer\': item, \'at.entity\': \'temp_null\'}, $event)"\n            ></span>\n          <icon-base if.bind="item" item.bind="item" count.bind="item.count"></icon-base>\n          <span\n            class="fas fa-level-down-alt"\n            if.bind="item.name"\n            click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': item, \'at.entity\': \'temp_null\'}, $event)"\n          ></span>\n        </span>\n      </div>\n    </div>\n    <div\n        if.bind="$scope.facBlock.buffers.out"\n        click.capture="CCC.provide($event, \'at\', \'factoryXput\', $scope.facBlock.buffers.out)"\n        class="col-4">\n      Outputs:\n      <span\n          class="connection"\n          click.delegate="CCC.issue(\'factoryBlock.setConnection\',\n          {\'dir.string\': \'drain\', \'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses)}, $event)">\n      ${IgorJs.getObjId($scope.facBlock.connections.drain).name || "none"}</span>\n      <div>\n        <span repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.out).items & signal:\'generalUpdate\'">\n          <span\n              class="fas fa-level-down-alt"\n              if.bind="item.name"\n              click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': item, \'at.entity\': \'temp_null\'}, $event)"\n            ></span>\n          <icon-base if.bind="item" item.bind="item" count.bind="item.count"></icon-base>\n        </span>\n      </div>\n    </div>\n  </div>\n  <div class="productionLines row" repeat.for="line of IgorJs.arrayFromIds($scope.facBlock.factoryLines) & signal:\'generalUpdate\'" click.capture="CCC.provide($event, \'at\', \'factoryLine\', line)">\n    <span\n      if.bind="line.buildingType"\n      click.delegate="CCC.issue(\'factoryLine.setRecipe\', {$_recipeXlist: ChameView.viewFn.recipeFilter(line.crafting_categories, true)}, $event)"\n      >\n      Recipe: \n        <icon-base\n          if.bind="line.recipe"\n          item.bind="line.recipe"\n          css="border-image-source: linear-gradient(to left, red ${$scope.facBlock.processing_ticks/processing_timer*100}%, green ${$scope.facBlock.processing_ticks/processing_timer*100}%)"\n        ></icon-base>\n        <span if.bind="!line.recipe">None</span>\n    </span>\n    <br>\n    <span>\n      <span if.bind="!line.buildingType" click.delegate="CCC.issue(\'factoryLine.setBuilding\', null, $event)">Set Building Type...</span>\n      <span if.bind=" line.buildingType" click.delegate="CCC.issue(\'factoryLine.addBuilding\', null, $event)">\n        <icon-base item.bind="line.buildingType"></icon-base>\n        : ${line.built}\n      </span>\n    </span>\n    <span>\n      Prepped spaces: ${line.prepped}\n      <span click.delegate="CCC.issue(\'factoryLine.prep\', null, $event)">Expand</span>\n    </span>\n  </div>\n  <div note="add new line to factory block" class="row">\n    <span click.delegate="CCC.issue(\'factoryBlock.addLine\', null, $event)">Add Line</span>\n  </div>\n</section>\n</template>\n'}}]);
//# sourceMappingURL=app~fba8b1df.8e880d7c043a8e706631.bundle.map