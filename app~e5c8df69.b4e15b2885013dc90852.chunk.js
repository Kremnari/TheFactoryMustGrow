(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"resources/elements/factoryBlocks/busView.html":function(e,n){e.exports='<template>\n  <scope-var var.bind="$scope={busLine: viewPane.showingItem}"></scope-var>\n  <section\n    click.capture="CCC.provide($event, \'at\', \'factoryBus\', viewPane.showingItem)"\n    mouseenter.trigger = "tooltip = null"\n    class="container">\n    <div class="row">\n      <div class="col">\n        Space: ${$scope.busLine.size}\n      </div>\n      <div class="col">\n        <h4 class="text-center">${$scope.busLine.name}</h4>\n      </div>\n      <div class="col text-end">\n        Complexity: ${$scope.busLine.complexity}\n      </div>\n    </div>\n    <div class="row">\n      <div class="col busLine_tut_inProgress">\n        <h5 class="text-center">Transport Belt</h5>\n        <div class="row">\n          <icon-base\n            repeat.for="item of IgorJs.getObjId($scope.busLine.processors.central).items"\n            item.bind="item.name"\n            if.bind="item.count>0"\n            count.bind="item.count"\n          ></icon-base>\n        </div>\n      </div>\n    </div>\n    <hr class="bus"/>\n    <div class="row">\n      <div class="col">\n        <div>\n          <h5>Sources</h5>\n          <span\n            class="progressBarBase busLine_expandProcessing"\n            css="border-image-source: linear-gradient(to right, green 0%, green ${$scope.busLine.processors.source.xferTimer/$scope.busLine.processors.source.xferTicks*100-10}%, red ${$scope.busLine.processors.source.xferTimer/$scope.busLine.processors.source.xferTicks*100+10}%, red )"\n          >Acquisition</span>\n          Qty: ${$scope.busLine.processors.source.xferQty}\n          <span\n            click.delegate="CCC.issue(\'factoryBus.expandProcessing\', {\'dir.string\':\'source\'}, $event)"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'input_processing\'})"\n            class="busLine_expandProcessing fas fa-plus-square fa_icon_sm"\n          ></span>\n        </div>\n        <span id="busLine_sources">\n          Max Sources: ${$scope.busLine.connections.maxSources}\n          <span \n            id="busLine_sources_add"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'expand_input_sources\'})"\n            click.delegate="CCC.issue(\'factoryBus.expandBus\', {\'dir.string\':\'source\'}, $event)"\n            class="fas fa-plus-square fa_icon_sm"\n          ></span>\n        </span><br>\n        <span repeat.for="source of $scope.busLine.connections.sources">\n          <span class="fas fa-sign-in-alt fa_icon_sm"></span>\n          ${source.named}\n          <icon-base\n            repeat.for="item of IgorJs.getObjId(source.buffer).items"\n            item.bind="item.name"\n            count.bind="item.count"\n          ></icon-base>\n          <span if.bind="$scope.busLine.processors.source.xferTarget==$index">&lt;--</span>\n        </span>\n      </div>\n      <div class="col">\n        <div>\n          <h5 class="text-end">Drains</h5>\n          <span\n          class="progressBarBase busLine_expandProcessing"\n          css="border-image-source: linear-gradient(to right, green 0%, green ${$scope.busLine.processors.drain.xferTimer/$scope.busLine.processors.drain.xferTicks*100-10}%, red ${$scope.busLine.processors.drain.xferTimer/$scope.busLine.processors.drain.xferTicks*100+10}%, red )"\n          >Deposition</span>\n          Qty: ${$scope.busLine.processors.drain.xferQty}\n          <span\n            class="fas fa-plus-square fa_icon_sm busLine_expandProcessing"\n            click.delegate="CCC.issue(\'factoryBus.expandProcessing\', {\'dir.string\':\'drain\'}, $event)"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'output_processing\'})"\n          ></span>\n        </div>\n        <span id="busLine_drains">\n          Max Drains: ${$scope.busLine.connections.maxDrains}\n          <span id="busLine_drains_add"\n            click.delegate="CCC.issue(\'factoryBus.expandBus\', {\'dir.string\':\'drain\'}, $event)"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'expand_output_drains\'})"\n            class="fas fa-plus-square fa_icon_sm"\n          ></span>\n        </span>\n        <br>\n        <span repeat.for="drain of $scope.busLine.connections.drains">\n          <span if.bind="$scope.busLine.processors.drain.xferTarget==$index">&gt;--</span>\n          <icon-base\n            repeat.for="item of IgorJs.getObjId(drain.buffer).items"\n            item.bind="item.name"\n            count.bind="item.count"\n          ></icon-base>\n          ${drain.named}\n          <span class="fas fa-sign-out-alt fa_icon_sm"></span>\n        </span>\n      </div>\n    </div>\n  </section>\n</template>\n'},"resources/elements/factoryBlocks/mainView.html":function(e,n){e.exports='<template>\n<scope-var var.bind="$scope={facBlock: viewPane.showingItem}"></scope-var>\n<section id="viewFacBlock" click.capture="CCC.provide($event, \'at\', \'factoryBlock\', $scope.facBlock )" class="container">\n  <div class=\'row\'>\n    <span class="col">Land Size : ${$scope.facBlock.size}</span>\n    <h3 class="col">${$scope.facBlock.name}</h3>\n    <span class="col">Complexity: ${$scope.facBlock.complexity}</span>\n  </div>\n  <div class="row bufferRow">\n    <div\n      if.bind="$scope.facBlock.buffers.in"\n      click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.facBlock.buffers.in)"\n      class="col">\n      <span class="fas fa-sign-out-alt fa_icon_sm"></span>:\n      <span\n        class="facBlockIn connection"\n        click.delegate="CCC.issue(\'factoryBus.connectTo\', \n          {\'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses), \'to.buffer\':  $scope.facBlock.buffers.in,\'dir.string\': \'input\'}, $event)"\n      >${IgorJs.getObjId($scope.facBlock.buffers.in, "connection").name || "none" & signal:\'generalUpdate\'}</span>\n      <icon-base\n        repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.in).items & signal:\'generalUpdate\'"\n        item.bind="item"\n        count.bind="item.count"\n        click.delegate="CCC.issue(\'entity.bufferFill\', {\'item.name\': item.name, \'at.entity\': \'temp_null\'}, $event)"\n      ></icon-base>\n    </div>\n    <div\n        if.bind="$scope.facBlock.buffers.internal"\n        click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.facBlock.buffers.internal)"\n        class="col">\n      <span class="fab fa-creative-commons-sa fa_icon_sm"></span>:\n      <div>\n        <span repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.internal).items & signal:\'generalUpdate\'">\n          <span\n              class="fas fa-level-up-alt fa-rotate-90"\n              if.bind="item.name"\n              click.delegate="CCC.issue(\'entity.bufferFill\', {\'item.name\': item.name, \'at.entity\': \'temp_null\'}, $event)"\n            ></span>\n          <icon-base if.bind="item" item.bind="item" count.bind="item.count"></icon-base>\n          <span\n            class="fas fa-level-down-alt"\n            if.bind="item.name"\n            click.delegate="CCC.issue(\'entity.bufferCollect\', {\'item.name\': item.name, \'at.entity\': \'temp_null\', }, $event)"\n          ></span>\n        </span>\n      </div>\n    </div>\n    <div\n      if.bind="$scope.facBlock.buffers.out"\n      click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.facBlock.buffers.out)"\n      class="col">\n      <span class="fas fa-sign-in-alt fa_icon_sm"></span>:\n      <span\n        class="facBlockOut connection"\n        click.delegate="CCC.issue(\'factoryBus.connectTo\',\n        {\'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses), \'to.buffer\':  $scope.facBlock.buffers.out,\'dir.string\': \'output\'}, $event)"\n      >${IgorJs.getObjId($scope.facBlock.buffers.out, "connection").name || "none" & signal:\'generalUpdate\'}</span>\n      <icon-base \n        repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.out).items & signal:\'generalUpdate\'"\n        if.bind="item" \n        item.bind="item" \n        count.bind="item.count"\n        click.delegate="CCC.issue(\'entity.bufferCollect\', {\'item.name\': item.name, \'at.entity\': \'temp_null\'}, $event)"\n      ></icon-base>\n    </div>\n  </div>\n  <div\n    class="productionLines row"\n    repeat.for="line of IgorJs.arrayFromIds($scope.facBlock.factoryLines) & signal:\'generalUpdate\'"\n    click.capture="CCC.provide($event, \'at\', \'factoryLine\', line)"\n    >\n    <span\n      if.bind="line.buildingType"\n      class="setRecipe"\n      click.delegate="CCC.issue(\'factoryLine.setRecipe\', {$_recipeXlist: ChameView.viewFn.recipeFilter(line.crafting_categories, true)}, $event)"\n      >\n      Recipe: \n        <icon-base\n          if.bind="line.recipe"\n          item.bind="line.recipe"\n          class="progressBarBase"\n          css="border-image-source: linear-gradient(to right, green ${line.processing_ticks/line.processing_time*100-5}%, red ${line.processing_ticks/line.processing_time*100+10}% )"\n          ></icon-base>\n        <span if.bind="!line.recipe">None</span>\n    </span>\n    <br>\n    <span>\n      <span\n        if.bind="!line.buildingType"\n        todo="building selection dialog needs to be more restricted"\n        click.delegate="CCC.issue(\'factoryLine.setBuilding\', null, $event)"\n        class="setBuildingType"\n      >Set Building Type...</span>\n      <span\n        if.bind="line.buildingType"\n        click.delegate="CCC.issue(\'factoryLine.addBuilding\', null, $event)"\n      >\n        <icon-base item.bind="line.buildingType"></icon-base>\n        : ${line.built}\n      </span>\n    </span>\n    <span>\n      Prepped spaces: ${line.prepped}\n      <span\n        click.delegate="CCC.issue(\'factoryLine.prep\', null, $event)"\n        mouseenter.trigger="tooltip=CCC.utilityFn(\'factoryLine.toolTips\', line.$_id, {which: \'foundation\'})"\n        class="fas fa-plus-square fa_icon_sm"\n      ></span>\n    </span>\n  </div>\n  <div note="add new line to factory block" class="row">\n    <span\n      mouseenter.trigger="CCC.utilityFn(\'factoryBlock.toolTips\', $scope.facBlock.$_id, {which: \'addLine\'})"\n      click.delegate="CCC.issue(\'factoryBlock.addLine\', null, $event)"\n    >Add Line</span>\n  </div>\n</section>\n</template>\n'},"resources/elements/factoryBlocks/resView.html":function(e,n){e.exports='<template>\n    <scope-var var.bind="$scope={resBlock: viewPane.showingItem}"></scope-var>\n    <section id="viewResBlock" click.capture="CCC.provide($event, \'at\', \'ResourceBlock\', viewPane.showingItem)">\n        <div class="row">\n            <span class="col">Space Used: ${$scope.resBlock.spaceUsed}</span>\n            <h3 class="col">${$scope.resBlock.name}</h3>\n            <span class="col">Complexity: ${$scope.resBlock.complexity}</span>\n        </div>\n        <div class="row">\n            <div class="col">\n                <span\n                    id="resBlock_foundation"\n                    click.delegate="CCC.issue(\'resBlock.prepSpace\', {}, $event)"\n                    mouseenter.trigger="tooltip = CCC.utilityFn(\'resBlock.__foundationCost\', $scope.resBlock.$_id)"\n                >Foundations: ${$scope.resBlock.prepped}</span>\n                <br>\n                <span\n                    id="resBlock_miners"\n                    click.delegate="CCC.issue(\'resBlock.buildMine\', {}, $event)"\n                    mouseenter.trigger="tooltip = CCC.utilityFn(\'resBlock.__minerCost\', $scope.resBlock.$_id)"\n                >Miners: ${$scope.resBlock.built}</span>\n            </div>\n            <div class="col">\n                <h5\n                    class="progressBarBase" \n                    css="border-image-source: linear-gradient(to left, red ${$scope.resBlock.mining_ticks/$scope.resBlock.patchProperties.mining_time*100}%, green ${$scope.resBlock.mining_ticks/$scope.resBlock.patchProperties.mining_time*100}%"\n                >\n                    <icon-base\n                        item.bind="$scope.resBlock.patchProperties.resource"\n                        if.bind="$scope.resBlock.patchProperties.resource"\n                        count.bind="CCC.utilityFn(\'inventory.total\', $scope.resBlock.output, {name: $scope.resBlock.patchProperties.resource}) & signal: \'generalUpdate\'"\n                        max_fill.bind="IgorJs.getObjId($scope.resBlock.output).stackSize"\n                        click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': $scope.resBlock.output, \'at.entity\': \'temp_null\', \'item.name\':$scope.resBlock.patchProperties.resource}, $event)"\n                    ></icon-base>\n                </h5>\n                <p\n                    class="resBlock_setResource"\n                    click.delegate="CCC.issue(\'resBlock.setResource\', {\'$_resourceXlist\': ChameView.viewFn.objectValues(dataSet.resource)}, $event )"\n                >Change Resource</p>\n            </div>\n            <div class="col">\n                <div\n                    class="resBlock connection"\n                    click.delegate="CCC.issue(\'factoryBus.connectTo\', \n                    {   \'dir.string\': \'output\',\n                        \'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses),\n                        \'to.buffer\': $scope.resBlock.output\n                    }, $event)"\n                >\n                    <span class="fas fa-sign-out-alt fa_icon"></span>\n                    ${IgorJs.getObjId(IgorJs.getObjId($scope.resBlock.output).connection).name || "none"}\n                </div>\n            </div>\n        </div>\n        </section>\n</template>'}}]);
//# sourceMappingURL=app~e5c8df69.b4e15b2885013dc90852.bundle.map