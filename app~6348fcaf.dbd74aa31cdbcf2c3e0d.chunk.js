(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"resources/elements/dataEditor":function(e,n,i){"use strict";i.r(n),i.d(n,"DataEditor",(function(){return b})),i.d(n,"ListSuggestionService",(function(){return m}));var t,s,a,o=i("aurelia-framework"),c=i("+Aae"),r=i("Iab2");var d,l,p,u,g,f,b=(a=function(){function e(){var e,n,i,t;this.editList=null,this.eTypes=["crafter","miner","research","defense","offense"],e=this,n="editType",t=this,(i=s)&&Object.defineProperty(e,n,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(t):void 0}),c.a.de=this,this.mgrs=c.a}var n=e.prototype;return n.detached=function(){this.editing=null,this.editList=null,this.editType=null},n.editTypeChanged=function(e){if(e){if("icons"==e)return this.editList=null,void(this.editing=null);this.editList=c.a.data[e],this.editing=null}},n.selectEdit=function(e){this.editing=c.a.data[this.editType][e],"entity"==this.editType&&(this.editing.crafting_categories?(this.eTypeSelect="crafter",this.editing.subType="crafter"):this.editing.resource_categories?(this.eTypeSelect="miner",this.editing.subType="miner"):this.editing.inputs?(this.eTypeSelect="research",this.editing.subType="research"):this.editing.defense_value?(this.eTypeSelect="defense",this.editing.subType="defense"):this.editing.offense_value&&(this.eTypeSelect="offense",this.editing.subType="offense"))},n.addNew=function(){this.editing={type:this.editType},"recipe"==this.editType&&(this.editing.ingredients=[{name:"__someitem__",amount:1}],this.editing.category="crafting",this.editing.results=[{name:"__someitem__",amount:1}],this.editing.enabled=!1),"technology"==this.editType&&(this.editing.prerequisites=["__sometech__"],this.editing.unlocks=["__somerecipe__"],this.editing.cost={ingredients:[["automation-science-pack",1]]})},n.saveItem=function(){"research"==this.eTypeSelect&&"string"==typeof this.editing.inputs&&(this.editing.inputs=this.editing.inputs.split(",")),c.a.data[this.editType][this.editing.name]=this.editing,this.editing=null},n.deleteItem=function(){delete c.a.data[this.editType][this.editing.name],delete this.editList[this.editing.name],this.editing=null},n.saveDataSet=function(){c.a.idb.set("dataSet",c.a.data),this.editList=null,this.editType=null},n.dlDataSet=function(){var e=new File([JSON.stringify(c.a.data)],"data_source.json",{type:"application/json"});Object(r.saveAs)(e)},n.close=function(){c.a.baseApp.viewPane.version="beta"},e}(),d=(t=a).prototype,l="editType",p=[o.e],u={configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}},f={},Object.keys(u).forEach((function(e){f[e]=u[e]})),f.enumerable=!!f.enumerable,f.configurable=!!f.configurable,("value"in f||f.initializer)&&(f.writable=!0),f=p.slice().reverse().reduce((function(e,n){return n(d,l,e)||e}),f),g&&void 0!==f.initializer&&(f.value=f.initializer?f.initializer.call(g):void 0,f.initializer=void 0),void 0===f.initializer&&(Object.defineProperty(d,l,f),f=null),s=f,t),m=function(){function e(e){this.type=e}var n=e.prototype;return n.suggest=function(e){if(""===e)return Promise.resolve([]);e=e.toLowerCase();var n=c.a.data[this.type].filter((function(n){return 0===n.name.toLowerCase().indexOf(e)})).map((function(e){return e.name}));return Promise.resolve(n)},n.getName=function(e){return e},e}()},"resources/elements/dataEditor.html":function(e,n,i){e.exports='<template>\n  <require from="./dataEditor.scss"></require>\n  <require from="./iconEditor"></require>\n  <header>\n    <h5 click.delegate="editType=\'item\'">Items</h5>\n    <h5 click.delegate="editType=\'recipe\'">Recipes</h5>\n    <h5 click.delegate="editType=\'technology\'">Technologies</h5>\n    <h5 click.delegate="editType=\'resource\'">Resources</h5>\n    <h5 click.delegate="editType=\'entity\'">Entities</h5>\n    <h5 click.delegate="editType=\'icons\'">Icons</h5>\n  </header>\n  <main>\n    <div if.bind="!editing">\n      <ul class="icon-list">\n        <img\n          repeat.for="each of editList | objectValues"\n          src.bind="mgrs.icon.getSrc(each.icon)"\n          click.delegate="selectEdit(each.name)"\n          >\n        </img>\n      </ul>\n    </div>\n    <div if.bind="editType==\'icons\'">\n      <icon-editor></icon-editor>\n    </div>\n    <div if.bind="editing">\n      Name: <input type="text" value.bind="editing.name"><br>\n      Icon: <input type="text" value.bind="editing.icon"><br>\n      <img src.bind="mgrs.icon.getSrc(editing.icon)"></img>\n    <div if.bind="editType==\'item\'">\n        StackSize: <input type="text" value.bind="editing.stack_size">\n      </div>\n      <div if.bind="editType==\'recipe\'">\n        Time: <input type="number" value.bind="editing.crafting_speed">\n        Enabled: <input type="checkbox" checked.bind="editing.enabled"><br>\n        Category: <input type="text" value.bind="editing.category"><br>\n        Ingredients: <textarea value.bind="editing.ingredients | jsonString" rows="6"></textarea><br>\n        Results: <textarea value.bind="editing.results | jsonString" rows="6"></textarea><br>\n      </div>\n      <div if.bind="editType==\'technology\'">\n        Enabled: <input type="checkbox" checked.bind="editing.enabled">\n        Hidden: <input type="checkbox" checked.bind="editing.hidden"><br>\n        Prereqs:<textarea value.bind="editing.prerequisites | jsonString" rows="6"></textarea><br>\n        Unlocks:<textarea value.bind="editing.unlocks | jsonString" rows="6"></textarea><br>\n        Cost: <input type="number" value.bind="editing.cost.count">\n        Time: <input type="number" value.bind="editing.cost.time"><br>\n        Ingredients: <textarea value.bind="editing.cost.ingredients | jsonString" rows="6"></textarea>\n      </div>\n      <div if.bind="editType==\'resource\'">\n        Time: <input type="numebr" value.bind="editing.mining_time">\n        Results: <input type="text" value.bind="editing.mining_results"><br>\n        Cat:  <input type="text" value.bind="editing.category">\n      </div>\n      <div if.bind="editType==\'entity\'">\n        Space used: <input value.bind="editing.space"></input>\n        <fieldset>\n          <label repeat.for="eType of eTypes">\n            <input type="radio" name="eType" value.bind="eType" checked.bind="eTypeSelect">\n            ${eType}\n          </label>\n        </fieldset>\n        <div if.bind="eTypeSelect==\'crafter\'">\n          <h5>Crafter</h5>\n          CraftCats: <textarea value.bind="editing.crafting_categories"></textarea>\n          Speed:<input type="number" value.bind="editing.crafting_speed">\n        </div>\n        <div if.bind="eTypeSelect==\'miner\'">\n          <h5>Miner</h5>\n          ResCats: <textarea value.bind="editing.resource_categories"></textarea>\n          Speed:<input type="number" value.bind="editing.mining_speed">\n        </div>\n        <div if.bind="eTypeSelect==\'research\'">\n          <h5>Researcher</h5>\n          Inputs: <textarea value.bind="editing.inputs"></textarea>\n          Speed: <input type="number" value.bind="editing.researching_speed">\n        </div>\n        <div if.bind="eTypeSelect==\'defense\'">\n          <h5>Defense</h5>\n          Value: <input type="number" value.bind="editing.defense_value">\n          Range: <input type="number" value.bind="editing.defense_range">\n        </div>\n        <div if.bind="eTypeSelect==\'offense\'">\n          <h5>Offense</h5>\n          Attack: <input type="number" value.bind="editing.offense_value">\n          Supply: <input type="number" value.bind="editing.offense_supply">\n          Radar: <input type="number" value.bind="editing.radar">\n        </div>\n      </div>\n    </div>\n    <div if.bind="editType==\'icons\'">\n      <div if.bind="editing">\n        ${editing.name}\n      </div>\n      <div if.bind="!editing">\n        Icons\n      </div>\n    </div>\n  </main>\n  <footer class="btn-group">\n    <span class="btn btn-secondary" click.delegate="editing = null" if.bind="editing">cancel</span>\n    <span class="btn btn-danger" click.delegate="deleteItem()" if.bind="editing">Delete</span>\n    <span class="btn btn-success" click.delegate="saveItem()" if.bind="editing">save Item</span>\n    \n    <span class="btn btn-secondary" click.delegate="close()" if.bind="!editing">Close</span>\n    <span class="btn btn-primary" click.delegate="addNew()" if.bind="!editing && editType">Add</span>\n    <span class="btn btn-info" click.delegate="saveDataSet()" if.bind="!editing">save list</span>\n    <span class="btn btn-light" click.delegate="dlDataSet()" if.bind="!editing">download</span>\n  </footer>\n</template>\n'},"resources/elements/dataEditor.scss":function(e,n,i){(n=i("JPst")(!1)).push([e.i,"data-editor{width:100%;height:100%;position:relative;display:grid;grid-template-columns:20% auto;grid-template-rows:10% auto max(8%,15px);-moz-column-gap:10px;column-gap:10px;row-gap:5px}data-editor header{overflow-x:auto;grid-row:1/2;grid-column:1/3}data-editor header h5{display:inline-block}data-editor aside{overflow-y:scroll;overflow-x:auto;grid-row:2/3;grid-column:1/2}data-editor aside::-webkit-scrollbar{width:10px}data-editor aside ol{list-style-type:none;-webkit-padding-start:0;padding-inline-start:0}data-editor main{grid-row:2/3;grid-column:1/3;overflow-y:auto}data-editor footer{grid-row:3/4;grid-column:1/3}data-editor textarea{resize:both;width:100%}data-editor input,data-editor textarea{background-color:#483d8b;color:#db7093}data-editor .list-group .list-group-item{padding:2px 4px;background-color:#483d8b}data-editor img{max-height:48px;max-width:48px;min-width:16px;min-height:16px;border:2px dotted #006400;border-radius:4px}#editDataSource{height:100vh;width:100vw}",""]),e.exports=n},"resources/elements/factoryBlocks/busView.html":function(e,n){e.exports='<template>\n  <scope-var var.bind="$scope={busLine: viewPane.showingItem}"></scope-var>\n  <section\n    click.capture="CCC.provide($event, \'at\', \'factoryBus\', viewPane.showingItem)"\n    mouseenter.trigger = "tooltip = null"\n    class="container">\n    <div class="row">\n      <div class="col">\n        Space: ${$scope.busLine.size}\n      </div>\n      <div class="col">\n        <h4 class="text-center">${$scope.busLine.name}</h4>\n      </div>\n      <div class="col text-end">\n        Complexity: ${$scope.busLine.complexity}\n      </div>\n    </div>\n    <div class="row">\n      <div class="col busLine_tut_inProgress">\n        <h5 class="text-center">Transport Belt</h5>\n        <div class="row">\n          <icon-base\n            repeat.for="item of IgorJs.getObjId($scope.busLine.processors.central).items"\n            item.bind="item.name"\n            if.bind="item.count>0"\n            count.bind="item.count"\n          ></icon-base>\n        </div>\n      </div>\n    </div>\n    <hr class="bus"/>\n    <div class="row">\n      <div class="col">\n        <div>\n          <h5>Sources</h5>\n          <span\n            class="progressBarBase busLine_expandProcessing"\n            css="border-image-source: linear-gradient(to right, green 0%, green ${$scope.busLine.processors.source.xferTimer/$scope.busLine.processors.source.xferTicks*100-10}%, red ${$scope.busLine.processors.source.xferTimer/$scope.busLine.processors.source.xferTicks*100+10}%, red )"\n          >Acquisition</span>\n          Qty: ${$scope.busLine.processors.source.xferQty}\n          <span\n            click.delegate="CCC.issue(\'factoryBus.expandProcessing\', {\'dir.string\':\'source\'}, $event)"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'input_processing\'})"\n            class="busLine_expandProcessing fas fa-plus-square fa_icon_sm"\n          ></span>\n        </div>\n        <span id="busLine_sources">\n          Max Sources: ${$scope.busLine.connections.maxSources}\n          <span \n            id="busLine_sources_add"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'expand_input_sources\'})"\n            click.delegate="CCC.issue(\'factoryBus.expandBus\', {\'dir.string\':\'source\'}, $event)"\n            class="fas fa-plus-square fa_icon_sm"\n          ></span>\n        </span><br>\n        <span repeat.for="source of $scope.busLine.connections.sources">\n          <span class="fas fa-sign-in-alt fa_icon_sm"></span>\n          ${source.named}\n          <icon-base\n            repeat.for="item of IgorJs.getObjId(source.buffer).items"\n            item.bind="item.name"\n            count.bind="item.count"\n          ></icon-base>\n          <span if.bind="$scope.busLine.processors.source.xferTarget==$index">&lt;--</span>\n        </span>\n      </div>\n      <div class="col">\n        <div>\n          <h5 class="text-end">Drains</h5>\n          <span\n          class="progressBarBase busLine_expandProcessing"\n          css="border-image-source: linear-gradient(to right, green 0%, green ${$scope.busLine.processors.drain.xferTimer/$scope.busLine.processors.drain.xferTicks*100-10}%, red ${$scope.busLine.processors.drain.xferTimer/$scope.busLine.processors.drain.xferTicks*100+10}%, red )"\n          >Deposition</span>\n          Qty: ${$scope.busLine.processors.drain.xferQty}\n          <span\n            class="fas fa-plus-square fa_icon_sm busLine_expandProcessing"\n            click.delegate="CCC.issue(\'factoryBus.expandProcessing\', {\'dir.string\':\'drain\'}, $event)"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'output_processing\'})"\n          ></span>\n        </div>\n        <span id="busLine_drains">\n          Max Drains: ${$scope.busLine.connections.maxDrains}\n          <span id="busLine_drains_add"\n            click.delegate="CCC.issue(\'factoryBus.expandBus\', {\'dir.string\':\'drain\'}, $event)"\n            mouseenter.trigger="tooltip = CCC.utilityFn(\'busLine_Costs\', $scope.busLine.$_id, {which: \'expand_output_drains\'})"\n            class="fas fa-plus-square fa_icon_sm"\n          ></span>\n        </span>\n        <br>\n        <span repeat.for="drain of $scope.busLine.connections.drains">\n          <span if.bind="$scope.busLine.processors.drain.xferTarget==$index">&gt;--</span>\n          <icon-base\n            repeat.for="item of IgorJs.getObjId(drain.buffer).items"\n            item.bind="item.name"\n            count.bind="item.count"\n          ></icon-base>\n          ${drain.named}\n          <span class="fas fa-sign-out-alt fa_icon_sm"></span>\n        </span>\n      </div>\n    </div>\n  </section>\n</template>\n'},"resources/elements/factoryBlocks/mainView.html":function(e,n){e.exports='<template>\n<scope-var var.bind="$scope={facBlock: viewPane.showingItem}"></scope-var>\n<section id="viewFacBlock" click.capture="CCC.provide($event, \'at\', \'factoryBlock\', $scope.facBlock )" class="container">\n  <div class=\'row\'>\n    <span class="col">Land Size : ${$scope.facBlock.size}</span>\n    <h3 class="col">${$scope.facBlock.name}</h3>\n    <span class="col">Complexity: ${$scope.facBlock.complexity}</span>\n  </div>\n  <div class="row bufferRow">\n    <div\n      if.bind="$scope.facBlock.buffers.in"\n      click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.facBlock.buffers.in)"\n      class="col">\n      <span class="fas fa-sign-out-alt fa_icon_sm"></span>:\n      <span\n        class="facBlockIn connection"\n        click.delegate="CCC.issue(\'factoryBus.connectTo\', \n          {\'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses), \'to.buffer\':  $scope.facBlock.buffers.in,\'dir.string\': \'input\'}, $event)"\n      >${IgorJs.getObjId($scope.facBlock.buffers.in, "connection").name || "none" & signal:\'generalUpdate\'}</span>\n      <icon-base\n        repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.in).items & signal:\'generalUpdate\'"\n        item.bind="item"\n        count.bind="item.count"\n        click.delegate="CCC.issue(\'entity.bufferFill\', {\'item.name\': item.name, \'at.entity\': \'temp_null\'}, $event)"\n      ></icon-base>\n    </div>\n    <div\n        if.bind="$scope.facBlock.buffers.internal"\n        click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.facBlock.buffers.internal)"\n        class="col">\n      <span class="fab fa-creative-commons-sa fa_icon_sm"></span>:\n      <div>\n        <span repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.internal).items & signal:\'generalUpdate\'">\n          <span\n              class="fas fa-level-up-alt fa-rotate-90"\n              if.bind="item.name"\n              click.delegate="CCC.issue(\'entity.bufferFill\', {\'item.name\': item.name, \'at.entity\': \'temp_null\'}, $event)"\n            ></span>\n          <icon-base if.bind="item" item.bind="item" count.bind="item.count"></icon-base>\n          <span\n            class="fas fa-level-down-alt"\n            if.bind="item.name"\n            click.delegate="CCC.issue(\'entity.bufferCollect\', {\'item.name\': item.name, \'at.entity\': \'temp_null\', }, $event)"\n          ></span>\n        </span>\n      </div>\n    </div>\n    <div\n      if.bind="$scope.facBlock.buffers.out"\n      click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.facBlock.buffers.out)"\n      class="col">\n      <span class="fas fa-sign-in-alt fa_icon_sm"></span>:\n      <span\n        class="facBlockOut connection"\n        click.delegate="CCC.issue(\'factoryBus.connectTo\',\n        {\'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses), \'to.buffer\':  $scope.facBlock.buffers.out,\'dir.string\': \'output\'}, $event)"\n      >${IgorJs.getObjId($scope.facBlock.buffers.out, "connection").name || "none" & signal:\'generalUpdate\'}</span>\n      <icon-base \n        repeat.for="item of IgorJs.getObjId($scope.facBlock.buffers.out).items & signal:\'generalUpdate\'"\n        if.bind="item" \n        item.bind="item" \n        count.bind="item.count"\n        click.delegate="CCC.issue(\'entity.bufferCollect\', {\'item.name\': item.name, \'at.entity\': \'temp_null\'}, $event)"\n      ></icon-base>\n    </div>\n  </div>\n  <div\n    class="productionLines row"\n    repeat.for="line of IgorJs.arrayFromIds($scope.facBlock.factoryLines) & signal:\'generalUpdate\'"\n    click.capture="CCC.provide($event, \'at\', \'factoryLine\', line)"\n    >\n    <span\n      if.bind="line.buildingType"\n      class="setRecipe"\n      click.delegate="CCC.issue(\'factoryLine.setRecipe\', {$_recipeXlist: ChameView.viewFn.recipeFilter(line.crafting_categories, true)}, $event)"\n      >\n      Recipe: \n        <icon-base\n          if.bind="line.recipe"\n          item.bind="line.recipe"\n          class="progressBarBase"\n          css="border-image-source: linear-gradient(to right, green ${line.processing_ticks/line.processing_time*100-5}%, red ${line.processing_ticks/line.processing_time*100+10}% )"\n          ></icon-base>\n        <span if.bind="!line.recipe">None</span>\n    </span>\n    <br>\n    <span>\n      <span\n        if.bind="!line.buildingType"\n        todo="building selection dialog needs to be more restricted"\n        click.delegate="CCC.issue(\'factoryLine.setBuilding\', null, $event)"\n        class="setBuildingType"\n      >Set Building Type...</span>\n      <span\n        if.bind="line.buildingType"\n        click.delegate="CCC.issue(\'factoryLine.addBuilding\', null, $event)"\n      >\n        <icon-base item.bind="line.buildingType"></icon-base>\n        : ${line.built}\n      </span>\n    </span>\n    <span>\n      Prepped spaces: ${line.prepped}\n      <span\n        click.delegate="CCC.issue(\'factoryLine.prep\', null, $event)"\n        mouseenter.trigger="tooltip=CCC.utilityFn(\'factoryLine.toolTips\', line.$_id, {which: \'foundation\'})"\n        class="fas fa-plus-square fa_icon_sm"\n      ></span>\n    </span>\n  </div>\n  <div note="add new line to factory block" class="row">\n    <span\n      mouseenter.trigger="CCC.utilityFn(\'factoryBlock.toolTips\', $scope.facBlock.$_id, {which: \'addLine\'})"\n      click.delegate="CCC.issue(\'factoryBlock.addLine\', null, $event)"\n    >Add Line</span>\n  </div>\n</section>\n</template>\n'},"resources/elements/factoryBlocks/resView.html":function(e,n){e.exports='<template>\n    <scope-var var.bind="$scope={resBlock: viewPane.showingItem}"></scope-var>\n    <section id="viewResBlock" click.capture="CCC.provide($event, \'at\', \'ResourceBlock\', viewPane.showingItem)">\n        <div class="row">\n            <span class="col">Space Used: ${$scope.resBlock.spaceUsed}</span>\n            <h3 class="col">${$scope.resBlock.name}</h3>\n            <span class="col">Complexity: ${$scope.resBlock.complexity}</span>\n        </div>\n        <div class="row">\n            <div class="col">\n                <span\n                    id="resBlock_foundation"\n                    click.delegate="CCC.issue(\'resBlock.prepSpace\', {}, $event)"\n                    mouseenter.trigger="tooltip = CCC.utilityFn(\'resBlock.__foundationCost\', $scope.resBlock.$_id)"\n                >Foundations: ${$scope.resBlock.prepped}</span>\n                <br>\n                <span\n                    id="resBlock_miners"\n                    click.delegate="CCC.issue(\'resBlock.buildMine\', {}, $event)"\n                    mouseenter.trigger="tooltip = CCC.utilityFn(\'resBlock.__minerCost\', $scope.resBlock.$_id)"\n                >Miners: ${$scope.resBlock.built}</span>\n            </div>\n            <div class="col">\n                <h5\n                    class="progressBarBase" \n                    css="border-image-source: linear-gradient(to left, red ${$scope.resBlock.mining_ticks/$scope.resBlock.patchProperties.mining_time*100}%, green ${$scope.resBlock.mining_ticks/$scope.resBlock.patchProperties.mining_time*100}%"\n                >\n                    <icon-base\n                        item.bind="$scope.resBlock.patchProperties.resource"\n                        if.bind="$scope.resBlock.patchProperties.resource"\n                        count.bind="CCC.utilityFn(\'inventory.total\', $scope.resBlock.output, {name: $scope.resBlock.patchProperties.resource}) & signal: \'generalUpdate\'"\n                        max_fill.bind="IgorJs.getObjId($scope.resBlock.output).stackSize"\n                        click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': $scope.resBlock.output, \'at.entity\': \'temp_null\', \'item.name\':$scope.resBlock.patchProperties.resource}, $event)"\n                    ></icon-base>\n                </h5>\n                <p\n                    class="resBlock_setResource"\n                    click.delegate="CCC.issue(\'resBlock.setResource\', {\'$_resourceXlist\': ChameView.viewFn.objectValues(dataSet.resource)}, $event )"\n                >Change Resource</p>\n            </div>\n            <div class="col">\n                <div\n                    class="resBlock connection"\n                    click.delegate="CCC.issue(\'factoryBus.connectTo\', \n                    {   \'dir.string\': \'output\',\n                        \'$_factoryBusXlist\': IgorJs.arrayFromIds(globals.facBlocks.buses),\n                        \'to.buffer\': $scope.resBlock.output\n                    }, $event)"\n                >\n                    <span class="fas fa-sign-out-alt fa_icon"></span>\n                    ${IgorJs.getObjId(IgorJs.getObjId($scope.resBlock.output).connection).name || "none"}\n                </div>\n            </div>\n        </div>\n        </section>\n</template>'},"resources/elements/factoryBlocks/techBlock.html":function(e,n){e.exports='<template>\n    <scope-var var.bind="$scope={techBlock: viwePane.showingItem"></scope-var>\n    <section\n        click.capture="CCC.provide($event, \'at\', \'techBlock\', viewPane.showingItem"\n        mouseenter.trigger = "tooltip = null"\n        class="container"\n    >\n        <div class="row">\n\n        </div>\n\n        <div class="d-none toolbox">\n\n        </div>\n    </section>\n</template>'}}]);
//# sourceMappingURL=app~6348fcaf.dbd74aa31cdbcf2c3e0d.bundle.map