(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"resources/elements/active-trigger.html":function(e,n){e.exports='<template bindable="entity, tag">\n  <span\n    if.bind="entity[tag]"\n    click.delegate="entity[tag] = false"\n  >On</span>\n  <span\n    if.bind="!entity[tag]"\n    click.delegate="entity[tag] = true"\n  >Off</span>\n</template>\n'},"resources/elements/byModule/crafting-infopane.html":function(e,n,i){e.exports='<template>\n  <require from="../../value-converters/lib/ObjectFilters"></require>\n  <style>\n    .overflow.recipe {\n      max-height: 8rem;\n    }\n  </style>\n  <div class="row mx-0">\n    <div class="container-fluid">\n      <div class="row">\n        <div \n          class="showRecipe col-7"\n          if.bind="view.$scope.showingEntity.processing"\n        >\n          <div\n            class="row ${view.$scope.showingEntity.process_timer!=NaN && \'progressBarBase\'}"\n            css="border-image-source: linear-gradient(to left, red ${view.$scope.showingEntity.process_timer/view.$scope.showingEntity.process_ticks*100}%, green ${view.$scope.showingEntity.process_timer/view.$scope.showingEntity.process_ticks*100}%)"\n          > \n            <span class="col">\n              <icon-base\n                repeat.for="ing of view.$scope.showingEntity.processing.ingredients | objectValues"\n                item.bind="ing.name"\n                required.bind="ing.amount"\n                count.bind="CCC.utilityFn(\'inventory.total\', view.$scope.showingEntity.buffers.in, {name: ing.name}) & signal:\'bufferUpdate\'"\n                click.delegate="CCC.issue(\'entity.bufferFill\', {\'which.buffer\': view.$scope.showingEntity.buffers.in, \'item.name\': ing.name}, $event)"\n              ></icon-base>\n            </span>\n            <span class="cycleTime">[${(view.$scope.showingEntity.process_ticks/30).toFixed(1)}s]</span>\n            <span class="recipeBreak">=&gtcc;</span>\n            <span class="col">\n              <icon-base\n                repeat.for="res of view.$scope.showingEntity.processing.results | objectValues"\n                item.bind="res.name"\n                required.bind="res.amount"\n                count.bind="CCC.utilityFn(\'inventory.total\', view.$scope.showingEntity.buffers.out, {name: res.name}) & signal:\'bufferUpdate\'"\n                click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': view.$scope.showingEntity.buffers.out, \'item.name\': res.name}, $event)"\n              ></icon-base>\n            </span>\n          </div>\n          <div class="row">\n            <span class="col">In Max: ${IgorJs.getObjId(view.$scope.showingEntity.buffers.in).stackSize}</span>\n            <span class="col">Out Max: ${IgorJs.getObjId(view.$scope.showingEntity.buffers.out).stackSize}</span>\n          </div>\n          <p click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': null, \'type.class\': null}, $event)" class="text-center">Clear recipe</p>\n        </div>\n        <div if.bind="!view.$scope.showingEntity.processing" id="recipeSelect" class="col-7">\n          <p>Select recipe to craft</p>\n          <div class="overflow recipe">\n            <icon-base\n              repeat.for="rec of view.Fn.recipeFilter(view.$scope.showingEntity.crafting_categories) | objectValues & signal:\'techResearched\'"\n              item.bind="rec"\n              click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': rec, \'type.class\': \'crafting\'}, $event)"\n              class="${rec==view.$scope.showingEntity.processing ? \'selected\': \'\'}"\n              mouseenter.bind="(view.set({type: \'scope\', which: \'tooltip\', what: rec})) & debounce:2000"\n              mouseleave2.bind="(view.unset({which: \'tooltip\'})) & debounce:2000"\n            ></icon-base>\n          </div>\n        </div>\n        <div class="col-5">\n          <compose view="resources/elements/byModule/upgrades-infopane.html"></compose>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class="row mx-0">\n    <div class="col">\n      <compose view="resources/elements/byModule/workshop-controls.html"></compose>\n    </div>\n  </div>\n</template>\n'},"resources/elements/byModule/lab-infopane.html":function(e,n,i){e.exports='<template>\n  <require from="./upgrades-infopane"></require>\n  <div class="container">\n    Max Buffer: ${IgorJs.getObjId(view.$scope.showingEntity.buffers.in).stackSize}\n    <div class="row">\n      <div class="col">\n        <div\n          class="labInput progressBarBase"\n          click.capture="CCC.provide($event, \'which\', \'buffer\', view.$scope.showingEntity.buffers.in)"\n          css="border-image-source: linear-gradient(to left, red ${view.$scope.showingEntity.research_timer/view.$scope.showingEntity.research_time*100}%, green ${view.$scope.showingEntity.research_timer/view.$scope.showingEntity.research_time*100}%)"\n        >\n          <icon-base\n            repeat.for="input of view.$scope.showingEntity.inputs"\n            item.bind="input"\n            count.bind="CCC.utilityFn(\'inventory.total\', view.$scope.showingEntity.buffers.in, {name: input}) & signal:\'bufferUpdate\'"\n            click.delegate="CCC.issue(\'entity.bufferFill\', {\'item.name\': input}, $event)"\n            title="Click to add ${input}"\n          ></icon-base>\n        </div>\n      </div>\n      <div class="col">\n        <span if.bind="globals.research.progressing">\n          ${globals.research.progressing.name}<br>\n          [${view.$scope.showingEntity.research_time/30}s]<br>\n          ${globals.research[globals.research.progressing.name].completeUnits}/\n          ${globals.research.progressing.cost.count}\n        </span>\n      </div>\n      <div class="col">\n        <compose view="resources/elements/byModule/upgrades-infopane.html"></compose>\n      </div>\n    </div>\n    <div class="row">\n      <div class="col">\n        <compose view="resources/elements/byModule/workshop-controls.html"></compose>\n      </div>\n    </div>\n  </div>\n</template>\n'},"resources/elements/byModule/mining-infopane.html":function(e,n,i){e.exports='<template bindable="item">\n  <require from="./upgrades-infopane"></require>\n  <div class="container">\n    <div class="minable-resources row">\n      <div class="col-7">\n        <div\n          if.bind="!view.$scope.showingEntity.processing"\n        >\n          <p>Select Resource to Mine</p>\n          <icon-base\n            repeat.for="res of dataSet.resource | filter:{key:\'category\', value:view.$scope.showingEntity.resource_categories, includeUndefs: true} | objectValues"\n            item.bind="res"\n            click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': res, \'type.class\':\'mining\'}, $event)"\n            class="${res==view.$scope.showingEntity.processing ? \'selected\': \'\'}"\n          ></icon-base>\n        </div>\n        <div\n          if.bind="view.$scope.showingEntity.processing"\n        >\n          <span\n            click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': view.$scope.showingEntity.buffers.out, \'item.name\': view.$scope.showingEntity.processing.mining_results}, $event)"\n            class="progressBarBase"\n            css="border-image-source: linear-gradient(to left, red ${view.$scope.showingEntity.process_timer}%, green ${view.$scope.showingEntity.process_timer}%)"\n          >\n            <icon-base\n              item.bind="view.$scope.showingEntity.processing.mining_results"\n              count.bind="CCC.utilityFn(\'inventory.total\', view.$scope.showingEntity.buffers.out, {name: view.$scope.showingEntity.processing.mining_results}) & signal:\'bufferUpdate\'"\n              title="Click to collect"\n            ></icon-base>\n            /${IgorJs.getObjId(view.$scope.showingEntity.buffers.out).stackSize}\n            \x3c!-- # magic number --\x3e\n            [${(view.$scope.showingEntity.process_ticks/30).toFixed(1) }s]\n          </span>\n          <span click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': null, \'type.class\': null}, $event)">\n            Change\n          </span>\n        </div>\n      </div>\n      <div class="col-5">\n        <compose view="resources/elements/byModule/upgrades-infopane.html" entity.bind="view.$scope.showingEntity" parcel.bind="view.$scope.showingEntity.parent"></compose>\n      </div>\n    </div>\n    <div class="row">\n      <div class="col">\n        <compose view="resources/elements/byModule/workshop-controls.html"></compose>\n      </div>\n    </div>\n  </div>\n</template>\n'},"resources/elements/byModule/tech-infopane.html":function(e,n){e.exports='<template>\n  <div click.capture="CCC.provide($event, \'which\', \'tech\', view.$scope.showingTech)">\n    <h5><icon-base item.bind="view.$scope.showingTech"></icon-base>${view.$scope.showingTech.name}</h5>\n    <button click.delegate="CCC.issue(\'research.set\', {}, $event)" if.bind="!globals.research.progressing && !globals.research[view.$scope.showingTech.name].complete" id="StartResearch">Research</button>\n    <button click.delegate="CCC.issue(\'research.clear\', {}, $event)" if.bind="globals.research.progressing.name == view.$scope.showingTech.name">Cancel</button>\n    <div if.bind="!globals.research[view.$scope.showingTech.name].complete & signal:\'techResearched\'">\n      <strong>Cost</strong>\n      <icon-base repeat.for="unit of view.$scope.showingTech.cost.ingredients" item.bind="unit[0]"></icon-base>\n      x${view.$scope.showingTech.cost.count - globals.research[view.$scope.showingTech.name].completeUnits}\n      <br>\n      <strong>Unlocks</strong>\n      <div repeat.for="unlock of view.$scope.showingTech.unlocks">\n        <icon-base if.bind="typeof unlock === \'string\'" item.bind="unlock" mouseenter.trigger="view.set({type: \'scope\', which: \'tooltip\', what: unlock})" mouseleave2.trigger="view.unset({which: \'tooltip\'})"></icon-base>\n        <span if.bind="typeof unlock === \'object\'">\n          Feature: ${unlock.feature}<br>\n          ${unlock.text}\n        </span>\n      </div>\n    </div>\n    <div if.bind="globals.research[view.$scope.showingTech.name].complete & signal:\'techResearched\'">\n      <strong>Unlocked</strong>\n      <div repeat.for="unlock of view.$scope.showingTech.unlocks">\n        <icon-base if.bind="typeof unlock === \'string\'" item.bind="unlock" mouseenter.trigger="view.set({type: \'scope\', which: \'tooltip\', what: unlock})" mouseleave2.trigger="view.unset({which: \'tooltip\'})"></icon-base>\n        <span if.bind="typeof unlock === \'object\'">Feature: ${unlock.feature}</span>\n      </div>\n    </div>\n  </div>\n</template>\n'},"resources/elements/byModule/upgrades-infopane":function(e,n,i){"use strict";i.r(n),i.d(n,"upgradesInfopaneCustomElement",(function(){return p}));var s,t,o,c=i("aurelia-framework"),r=i("+Aae");function a(e,n,i,s){i&&Object.defineProperty(e,n,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(s):void 0})}function l(e,n,i,s,t){var o={};return Object.keys(s).forEach((function(e){o[e]=s[e]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=i.slice().reverse().reduce((function(i,s){return s(e,n,i)||i}),o),t&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(t):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,n,o),o=null),o}var p=(t=l((s=function(){a(this,"entity",t,this),a(this,"parcel",o,this),this.EM=r.a.entity}).prototype,"entity",[c.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),o=l(s.prototype,"parcel",[c.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),s)},"resources/elements/byModule/upgrades-infopane.html":function(e,n){e.exports='<template>\n  <style>\n    .upgrades-infopane icon-base {\n      width: 32px;\n      height: 32px;\n    }\n    .upgrades-infopane {\n      font-size: 0.9rem;\n    }\n  </style>\n  <div class="upgrades-infopane container">\n    <div\n      class="row"\n      if.bind="view.$scope.showingEntity.buffers.in"\n      click.capture="CCC.provide($event, \'which\', \'buffer\', view.$scope.showingEntity.buffers.in)"\n      >\n      <div>\n        <scope-var var.bind="view.set({type: \'scope\', which: \'inBuffer\', what: IgorJs.getObjId(view.$scope.showingEntity.buffers.in) })"></scope-var>\n        Input Upgrades\n      </div>\n      <div>\n        <icon-base\n          item="iron-chest"\n          count.bind="view.$scope.inBuffer.upgrades.bufferSize.count"\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'buffer\'}, $event)"\n          class="${view.$scope.inBuffer.upgrades.bufferSize.count>=6 && \'countFull\'}"\n        ></icon-base>\n        <icon-base\n          item="inserter"\n          count.bind="view.$scope.inBuffer.upgrades.loader.count"\n          stalled.bind="view.$scope.inBuffer.upgrades.loader.count>0 && view.$scope.inBuffer.stalled"\n          progress.bind="(view.$scope.inBuffer.xferTicks-view.$scope.inBuffer.xferTimer)/view.$scope.inBuffer.xferTicks*100"\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'autoload\'}, $event)"\n          class="${view.$scope.inBuffer.upgrades.loader.count>=10 && \'countFull\'}"\n        ></icon-base>\n        <active-trigger\n          entity.bind="view.$scope.inBuffer"\n          tag="active"\n          if.bind="view.$scope.inBuffer.xfer>0"\n        ></active-trigger>\n      </div>\n    </div>\n    <div\n      class="row"\n      if.bind="view.$scope.showingEntity.buffers.out"\n      click.capture="CCC.provide($event, \'which\', \'buffer\', view.$scope.showingEntity.buffers.out)"\n    >\n      <div>\n        <scope-var var.bind="view.set({type: \'scope\', which: \'outBuffer\', what: IgorJs.getObjId(view.$scope.showingEntity.buffers.out) })"></scope-var>\n        Output Upgrades\n      </div>\n      <div>\n        <icon-base\n          item="iron-chest"\n          count.bind="view.$scope.outBuffer.upgrades.bufferSize.count"\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'buffer\'}, $event)"\n          class="${view.$scope.outBuffer.upgrades.bufferSize.count>=6 && \'countFull\'}"\n        ></icon-base>\n        <icon-base\n          item="inserter"\n          count.bind="view.$scope.outBuffer.upgrades.loader.count"\n          stalled.bind="view.$scope.outBuffer.upgrades.loader.count>0 && view.$scope.outBuffer.stalled"\n          progress.bind="((view.$scope.outBuffer.xferTicks-view.$scope.outBuffer.xferTimer)/view.$scope.outBuffer.xferTicks*100)"\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'autoload\'}, $event)"\n          class="${view.$scope.outBuffer.upgrades.loader.count>=10 && \'countFull\'}"\n        ></icon-base>\n        <active-trigger\n          entity.bind="view.$scope.outBuffer"\n          tag="active"\n          if.bind="view.$scope.outBuffer.xfer>0"\n        ></active-trigger>\n      </div>\n    </div>\n  </div>\n</template>\n'},"resources/elements/byModule/workshop-controls.html":function(e,n){e.exports='<template>\n    <style>\n        .wc-input {\n            width: 2.5em\n        }\n        #work_controls {\n            text-align: center;\n        }\n        #work_controls .fas {\n            width: 32px;\n            height: 32px;\n        }\n        .editActive {\n            color: green;\n        }\n    </style>\n    <span\n        class="${$scope.editPos && \'editActive\'}"\n        if.bind="IgorRunner.getNamedObject(\'global\').player.workshop.entities.length-1"\n        click.delegate="$scope.editPos=!$scope.editPos"\n    >Edit Position</span>\n    <section id="work_controls" if.bind="$scope.editPos">\n        <div class="row">\n            <div class="col align-self-center">\n                Move Spaces\n            </div>\n        </div>\n        <div class="row">\n            <div class="col">\n                <span\n                    show.bind="view.$scope.showingEntity.order<IgorRunner.getNamedObject(\'global\').player.workshop.entities.length-1"\n                    class="fas fa-angle-right fa-rotate-180 fa-2x"\n                    click.delegate="CCC.utilityFn(\'workshop.moveEntity\', null, {which: view.$scope.showingEntity.$_id, to: view.$scope.showingEntity.order+orderStep})"\n                ></span>\n            </div>\n            <div class="col">\n                <input type="hidden" value.one-time="orderStep = 1">\n                <input  class="wc-input" type="number"\n                min="1" max="10"\n                step="1" value.bind="orderStep">\n            </div>\n            <div class="col">\n                <span\n                    show.bind="view.$scope.showingEntity.order>0"\n                    class="fas fa-angle-right fa-2x"\n                    click.delegate="CCC.utilityFn(\'workshop.moveEntity\', null, {which: view.$scope.showingEntity.$_id, to: view.$scope.showingEntity.order-orderStep})"\n                ></span>\n            </div>\n        </div>\n        <div class="row">\n            <div\n                class="col align-self-center"\n                click.delegate="CCC.issue(\'workshop.recover\', {\'which.entity\': view.$scope.showingEntity.$_id}, $event)"\n            >\n                Remove Building\n            </div>\n        </div>\n    </section>\n</template>'}}]);
//# sourceMappingURL=app~081fda35.c10323dbfb79adae9122.bundle.map