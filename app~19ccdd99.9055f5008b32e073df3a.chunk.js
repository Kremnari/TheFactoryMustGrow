(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"++kE":function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var i={ones:1,tens:0,huns:0,abs:!1,fail:!1,get val(){return 100*this.huns+10*this.tens+this.ones},calc_val:function(e){return Math.min(this.val,e)},calc:function(e,n,t){return Math.min(this.val,Math.min(t,n-e))}}},"59E+":function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var i,a=t("aurelia-framework"),s=t("aurelia-event-aggregator"),c=t("+Aae"),r=Object(a.d)(s.a)(i=function(){function e(e){this.techList={},this.shownTechs=[],this.visFilters=[],this.filters={ShowComplete:!0,ShowPack:{"automation-science-pack":!0,"logistic-science-pack":!1,"military-science-pack":!1,"chemical-science-pack":!1,"production-science-pack":!1,"utility-science-pack":!1,"space-science-pack":!1}},this.researching=null,this.events=e}var n=e.prototype;return n.import=function(e,n){var t=this;this.recipeMgr=c.a.rec,Object.entries(e).forEach((function(e){var i=e[0],a=e[1],s=new o(a,null==n?void 0:n[i]);t.techList[i]=s})),this.applyFilter("prereqs",{count:0}),this.applyFilter("byPack",{pack:"automation-science-pack"}),this.updateVisible(),c.a.Ticker.DataProvider((function(e){t.TickerProvider(e)}))},n.serialize=function(){for(var e={},n=0,t=Object.values(this.techList);n<t.length;n++){var i=t[n];if(i.researched||i.completeUnits){var a={name:i.name,type:i.type,researched:i.researched,completeUnits:i.completeUnits};e[i.name]=a}}return e},n.TickerProvider=function(e){e.entities||(e.entities={}),e.entities.types||(e.entities.types=[]),this.researching&&e.entities.types.push("lab"),e.mgrs||(e.mgrs={}),e.mgrs.tech=this},n.select_research=function(e){this.researching=e,this.nextIngredients=this.researching.cost.ingredients},n.cancel_research=function(){this.researching=null,this.nextIngredients=null},n.increment_research=function(){this.researching.completeUnits++,this.researching.completeUnits==this.researching.cost.count&&this.complete_research()},n.complete_research=function(){this.researching.researched=!0,this.researching.unlocks.forEach((function(e){return c.a.rec.recipeList[e]&&(c.a.rec.recipeList[e].enabled=!0)})),this.researching=null,this.nextIngredients=null,this.updateVisible()},n.applyFilter=function(e,n){return this.visFilters.push({type:e,args:n})-1},n.hasFilter=function(e){return this.visFilters.findIndex((function(n){return n.type==e}))>-1},n.removeFilter=function(e){var n=this.visFilters.findIndex((function(n){return n.type==e}));this.visFilters.splice(n,1)},n.updateVisible=function(){var e,n,t=this,i=[];Object.entries(this.techList).forEach((function(e){e[0];var n=e[1];t.visFilters.every((function(e){switch(e.type){case"prereqs":if(0==e.args.count&&(!n.prerequisites||0==n.prerequisites.count))return!0;return n.prerequisites.reduce((function(e,n){return t.techList[n]||console.log(n),e+!t.techList[n].researched}),0)==e.args.count;case"byPack":return n.cost.ingredients.some((function(n){var t=n[0];n[1];return t==e.args.pack}));case"complete":return!n.researched}return!1}))&&i.push(n)})),this.shownTechs=i,null==(e=this.mgrs)||null==(n=e.signaler)||n.signal("techUpdate")},n.toggleFilter=function(e,n){switch(e){case"complete":this.hasFilter("complete")?(this.removeFilter("complete"),this.filters.ShowComplete=!1):(this.applyFilter("complete",{}),this.filters.ShowComplete=!0);break;case"byPack":this.filters.ShowPack[n]=!this.filters.ShowPack[n]}this.updateVisible()},e}())||i,o=function(e,n){Object.assign(this,e),this.completeUnits=(null==n?void 0:n.completeUnits)||0,this.researched=!1,(null==n?void 0:n.researched)&&(this.researched=!0,this.unlocks.forEach((function(e){return c.a.rec.recipeList[e]&&(c.a.rec.recipeList[e].enabled=!0)})))}},Evr9:function(e,n,t){"use strict";(function(e){t.d(n,"a",(function(){return s}));var i=t("+Aae"),a=[0,"0.1",1,2,3],s=new(function(){function n(){this.atStep=0}var t=n.prototype;return t.start=function(){var n=this;e("#tutorial").addClass("Block"),e("#tut_button").click((function(){n.nextStep()})),this.setStep(a[this.atStep])},t.nextStep=function(){e(".tutStep").removeClass("tutStep"),e("#tut_button").hide(),e("#tut_text").text(""),this.setStep(a[++this.atStep])},t.setStep=function(n){var t=this;switch(console.log("running step: "+n),n){case 0:e("#tut_text").text("The Factory Must Grow"),e("#tut_button").text("Let's build it").show();break;case"0.1":e("#resources").addClass("tutStep"),e("#tut_text").text("You can mine (click) these by hand"),e("#tut_button").text("Got it").show();break;case 1:e("#tut_button").hide(),i.a.Ticker.resume(),e("#resources icon-base[title='stone']").addClass("tutStep"),e("#tut_text").text("Mine 5 stone"),i.a.baseApp.player.inv.when({name:"stone",count:5},(function(){t.nextStep()}));break;case 2:e("#resources icon-base[title='stone']").removeClass("tutStep"),e("#tut_text").text("Now build a furnace to melt metal to plates"),e("#recipes icon-base[title='stone-furnace']").addClass("tutStep"),i.a.baseApp.player.inv.when({name:"stone-furnace",count:1},(function(){t.nextStep()}));break;default:e("#tutorial").hide(),console.log("default, reset")}},t.runStep=function(n){n.block?e(".tutorial").addClass("Block"):e(".tutorial").removeClass("Block"),e(n.highlight).css("z-index",2e3)},n}());i.a.tut=s}).call(this,t("EVdn"))},"app.html":function(e,n,t){e.exports='<template>\n  <require from="bootstrap/dist/css/bootstrap.min.css"></require>\n  <require from="@fortawesome/fontawesome-free/css/all.min.css"></require>\n  <require from="./styles.scss"></require>\n  <require from="./tfmg.scss"></require>\n\n  <header id="selector">\n    <div id="devControls" if.bind="showDev">\n      <button click.delegate="save()">Save</button>\n      <button click.delegate="resetSave()">Start Anew</button>\n      <button click.delegate="mgrs.Ticker.once()">Tick 1</button>\n      <button click.delegate="mgrs.Ticker.toggle()">${mgrs.Ticker.isRunning ? "Pause" : "Resume"}</button>\n      <button click.delegate="testing()">Testing...</button>\n      <button click.delegate="iconEditor()">Edit Icons</button>\n    </div>\n    <div id="playerControls">\n      <h4 click.delegate="viewPane.main = \'home\'">Home</h4>\n      <h4 click.delegate="viewPane.main = \'entities\'">Machina</h4>\n      <h4 click.delegate="viewPane.main = \'facBlocks\'">Blocks</h4>\n      <h4 click.delegate="viewPane.main = \'research\'">Research</h4>\n    </div>\n    <div id="facBlockControls" if.bind="viewPane.facBlock==player">\n      <div show.bind="viewPane.main == \'entities\'">\n        <h5 click.delegate="viewPane.entityPane = \'mining\'">Mining</h5>\n        <h5 click.delegate="viewPane.entityPane = \'manuf\'">Manufacturing</h5>\n        <h5 click.delegate="viewPane.entityPane = \'labs\'">Labs</h5>\n      </div>\n    </div>\n    <require from="resources/elements/tool-tip"></require>\n    <tool-tip display.bind="tooltip" item-mgr.bind="mgrs.item" recipe-mgr.bind="mgrs.rec"></tool-tip>\n  </header>\n  <div id="mainView" if.bind="viewPane!=\'iconEditor\'">\n    <article>\n      <section id="recipes" show.bind="viewPane.main == \'home\'">\n        <h3>Crafting categories</h3>\n        <div>\n          <h4>Hand Craft</h4>\n          <div class="overflow">\n            <icon-base\n              repeat.for="rec of mgrs.rec.recipes_by_cats[\'crafting\']  | objectValues "\n              item.bind="rec"\n              title = "${rec.name}"\n              click.delegate="mgrs.rec.startCraft(rec, player.inv, \' \')"\n              show.bind="rec.enabled"\n              class.bind="rec.classesStr"\n              anim_class.bind="rec.style"\n              mouseenter.trigger="tooltip = rec"\n              mouseleave.trigger="tooltip = null"\n            ></icon-base>\n          </div>\n        </div>\n      </section>\n      <section id="resources" show.bind="viewPane.main == \'home\'">\n        <h3>Mineables</h3>\n        <icon-base repeat.for="res of mgrs.res.resList | canMine | objectValues" item.bind="res" click.delegate="mgrs.res.mine(res.name, player.inv)"\n                  class="${res.mining ? \'mining\': null}" anim_style.bind="res.miningStyle"></icon-base> \n      </section>\n      <section id="technologies"  show.bind="viewPane.main == \'research\'">\n        <h3>Research</h3>\n        <require from="./resources/elements/byModule/tech-infopane.html"></require>\n        <tech-infopane if.bind="viewPane.showingCat==\'tech\'" tech.bind="viewPane.showingItem" tech-mgr.bind="mgrs.tech" tooltip.bind="tooltip"></tech-infopane>\n        <div class="overflow">\n          <icon-base repeat.for="tech of mgrs.tech.shownTechs & signal:\'techUpdate\'" click.delegate="showItem = {item: tech, cat: \'tech\'}"\n                      item.bind="tech" count.bind="tech.prerequisites.length"\n                      class="${mgrs.tech.researching==tech ? \'researching\' : \'\'} ${tech.researched ? \'researched\': \'\'} ${viewPane.showingItem==tech ? \'selected\': \'\'}"\n          >\n          </icon-base>\n        </div>\n        <div>\n          <h5>Filters</h5>\n          <p>Filter Complete<button click.delegate="mgrs.tech.toggleFilter(\'complete\')">${mgrs.tech.filters.ShowComplete? "Hide":"Show"}</button></p>\n          <p>Filter Pack:\n            <span repeat.for="pack of mgrs.tech.filters.ShowPack | objectEntries & signal:\'techUpdate\'"\n              class="${pack[1]? \'selected\':\'\'}" click.delegate="mgrs.tech.toggleFilter(\'byPack\', pack[0])"\n              >\n              <img src.bind="mgrs.icon.getSrc(\'item\', pack[0])" height="16px">\n            </span>\n          </p>\n        </div>\n      </section>\n      <section id="facBlocks" show.bind="viewPane.main == \'facBlocks\'">\n        <h3>Factory Blocks</h3>\n        <div click.delegate="select_FacBlock(player, true)" class=\'${viewPane.facBlock==player ? "selected":""}\'>player</div>\n        <div repeat.for="facBlock of facBlocks" click.delegate="select_FacBlock(facBlock)" class=\'${viewPane.facBlock==facBlock ? "selected":""}\'>\n          ${facBlock.name}:${facBlock.type}\n        </div>\n        <div>\n          <span class="button" click.delegate="add_FacBlock(\'factory\')">Add Factory Block</span>\n          <span class="button" click.delegate="add_FacBlock(\'bus\')">Add Bus Block</span>\n          <span class="button" click.delegate="add_FacBlock(\'resource\')">Add Resource Block</span>\n          <span class="button" click.delegate="add_FacBlock(\'research\')">Add Lab Block</span>\n        </div>\n      </section>\n      <section id="machines" if.bind="viewPane.main == \'entities\' && viewPlayer">\n        <div show.bind="viewPane.entityPane == \'mining\'">\n          <h4>Mining</h4>\n          <require from="./resources/elements/byModule/mining-infopane.html"></require>\n          <mining-infopane if.bind="viewPane.showingCat==\'miner\'" miner.bind="viewPane.showingItem" actor.bind="player" res-mgr.bind="mgrs.res" rounder.bind="rounder"></mining-infopane>\n          <div class="entityList">\n            <icon-base repeat.for="miner of viewPane.facBlock.getEntities(\'mining\') & signal:\'addedEntity\'" item.bind="miner" alt-image.bind="miner.mining.icon"\n                      click.delegate="showing(miner, \'miner\')" class.bind="miner.selectedClass"></icon-base>\n          </div>\n        </div>\n        <div show.bind="viewPane.entityPane == \'manuf\'">\n          <h4>Manufacturing</h4>\n          <require from="./resources/elements/byModule/crafting-infopane.html"></require>\n          <crafting-infopane if.bind="viewPane.showingCat==\'crafter\'" crafter.bind="viewPane.showingItem" rec-mgr.bind="mgrs.rec" item-mgr.bind="mgrs.item" actor.bind="player" inventory.bind="viewPane.facBlock.inv" rounder.bind="rounder"></crafting-infopane>\n          <div class="entityList">\n            <icon-base\n              repeat.for="crafter of viewPane.facBlock.getEntities(\'crafting\') & signal:\'addedEntity\'"\n              item.bind="crafter"\n              alt-image.bind="crafter.recipe.icon"\n              click.delegate="showing(crafter, \'crafter\')"\n              class.bind="crafter.selectedClass"\n            ></icon-base>\n          </div>\n        </div>\n        <div show.bind="viewPane.entityPane == \'labs\'">\n          <h4>Labs</h4>\n          <require from="./resources/elements/byModule/lab-infopane.html"></require>\n          <lab-infopane if.bind="viewPane.showingCat==\'labs\'" lab.bind="viewPane.showingItem" item-mgr.bind="mgrs.item" rounder.bind="rounder"></lab-infopane>\n          <div class="entityList">\n            <icon-base repeat.for="labee of viewPane.facBlock.getEntities(\'lab\') & signal:\'addedEntity\'" item.bind="labee" click.delegate="showing(labee, \'labs\')" class.bind="labee.selectedClass"></icon-base>\n          </div>\n        </div>\n      </section>\n      <section if.bind="viewPane.main == \'entities\' && !viewPlayer">\n        <require from="resources/elements/factoryBlocks/transportLine.html" as="transport-line"></require>\n        <require from="resources/elements/factoryBlocks/entityLine" as="entity-line"></require>\n        <require from="resources/elements/factoryBlocks/TransportLineUpgrades.html" as="tlu"></require>\n        Block Name: ${viewPane.facBlock.name}\n        <div if.bind="viewPane.facBlock.inputLine">\n          <p>\n            Feed From: ${viewPane.facBlock.feeds[0].name}\n            <span click.delegate="viewPane.facBlock.SelectBusFeed()">(Change)</span>\n          </p>\n          <transport-line\n            if.bind="viewPane.facBlock.inputLine"\n            line.bind="viewPane.facBlock.inputLine"\n            inv-click.call="CC.InvXFer(inv, player.inv, {stacks: [item]})"\n            type="input"\n          ></transport-line>\n          <tlu \n            upgrades.bind="viewPane.facBlock.upgrades.input"\n            apply-upgrade.call="viewPane.facBlock.ApplyUpgrade({\n              upgrade\n              ,inv: player.inv\n              ,line: viewPane.facBlock.inputLine\n            })"\n          ></tlu>\n          <hr>\n        </div>\n        <div repeat.for="line of viewPane.facBlock.lines">\n          <transport-line\n            if.bind="line.items"\n            line.bind="line"\n            type="internal"\n          ></transport-line>\n          <entity-line\n            if.bind="line.entities"\n            line.bind="line"\n          ></entity-line>\n        </div>\n        <div if.bind="viewPane.facBlock.outputLine">\n          <hr>\n          <p>\n            Drains To: ${viewPane.facBlock.drains[0].name}\n            <span click.delegate="viewPane.facBlock.SelectBusDrain()">(Change)</span>\n          </p>\n          <tlu\n            upgrades.bind="viewPane.facBlock.upgrades.output"\n            apply-upgrade.call="viewPane.facBlock.ApplyUpgrade({\n              upgrade\n              ,inv: player.inv\n              ,line: viewPane.facBlock.outputLine\n            })"\n          ></tlu>\n          <transport-line\n            if.bind="viewPane.facBlock.outputLine"\n            line.bind="viewPane.facBlock.outputLine"\n            inv-click.call="CC.InvXFer(inv, player.inv, {stacks: [item]})"\n            type="output"\n          ></transport-line>\n        </div>\n      </section>\n    </article>\n  </div>\n  <div id="iconEditor" if.bind="viewPane==\'iconEditor\'">\n    <select value.bind="IE.select.Cat">\n      <option repeat.for="cat of IE.ds.old | objectKeys & signal:\'update\'" model.bind="cat">${cat}</option>\n    </select>\n    <select value.bind="IE.select.Icon">\n      <option repeat.for="icon of IE.ds.old[IE.select.Cat] | objectKeys & signal:\'update\'" model.bind="icon">${icon}</option>\n    </select>\n    <button click.delegate="IEshow()">Show</button><br>\n    <figcaption class="inline">Old</figcaption>\n    <img src.bind="IE.showOld & signal:\'update\'" height="64px" width="64px"/>\n    <img src.bind="IE.showNew & signal:\'update\'" height="64px" width="64px"/>\n    <figcaption class="inline">New</figcaption><br>\n    <input type="file" files.bind="IE.file" accept="image/*" change.delegate="IEfiled()">Select replace</input>\n    <img src.bind="IE.fileBlob"></img><br>\n    <button click.delegate="IEStore()">Store</button>\n    <button click.delegate="saveIconEditor()">SaveDB</button><br>\n    <button click.delegate="dlIconEditor()">Download</button>\n    <input type="file" name="name" files.bind="IE.upload" style="display:none" id="IconFileSelect" accept=".json" change.delegate="ulIconEditor()">\n    <button onclick="document.getElementById(\'IconFileSelect\').click();">Upload</button>\n  </div>\n  <section id="inventoryList">\n    <h3>Inventory</h3>\n    <inventory\n      items.bind="player.inv.items"\n      click-call.call="player.inv.click({\n         where:viewPane.facBlock, which: item\n        ,who: player, what:\'use\'\n        })"\n      ></inventory>\n  </section>\n  <div id="tutorial">\n    <div id="tut_pos" class="center">\n      <span id="tut_text"></span>\n      <button id="tut_button" class="center"></button>\n    </div>\n  </div>\n  <section id="numSelectors">\n    <input type="checkbox" id="numSelToggle" style="display:none">\n    <label for="numSelToggle">Rounder&nbsp<span class="tabOnly">${mgrs.rounder.huns}${mgrs.rounder.tens}${mgrs.rounder.ones}</span>\n    </label>\n    <input id="huns" type="range" min="0" max="9" step="1" value.bind="mgrs.rounder.huns">\n    <input id="tens" type="range" min="0" max="9" step="1" value.bind="mgrs.rounder.tens">\n    <input id="ones" type="range" min="0" max="9" step="1" value.bind="mgrs.rounder.ones">\n    <span>${mgrs.rounder.huns}${mgrs.rounder.tens}${mgrs.rounder.ones}</span>\n    <label class="switch"><input type="checkbox" value.bind="mgrs.rounder.abs"><span class="slider text_abs_mod"></span></label>\n    <label class="switch"><input type="checkbox" value.bind="mgrs.rounder.fail"><span class="slider text_full_part"></span></label>\n  </section>\n  <section id="tagFilter">\n    <input id="drawer-toggle" type="checkbox" />\n    <label for="drawer-toggle" id="drawer-toggle-label">\n      <span>Filters</span>\n    </label>\n    <div id="drawer">\n      More Data!\n    </div> \n  </section>\n</template>\n'}}]);
//# sourceMappingURL=app~19ccdd99.9055f5008b32e073df3a.bundle.map